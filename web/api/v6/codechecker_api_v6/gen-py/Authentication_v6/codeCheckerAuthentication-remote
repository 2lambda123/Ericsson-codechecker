#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from Authentication_v6 import codeCheckerAuthentication
from Authentication_v6.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void checkAPIVersion()')
    print('  HandshakeInformation getAuthParameters()')
    print('   getAcceptedAuthMethods()')
    print('  string performLogin(string authMethod, string authString)')
    print('  bool destroySession()')
    print('  string getLoggedInUser()')
    print('   getPermissions(string scope)')
    print('   getPermissionsForUser(string scope, string extraParams, PermissionFilter filter)')
    print('  AuthorisationList getAuthorisedNames(Permission permission, string extraParams)')
    print('  bool addPermission(Permission permission, string authName, bool isGroup, string extraParams)')
    print('  bool removePermission(Permission permission, string authName, bool isGroup, string extraParams)')
    print('  bool hasPermission(Permission permission, string extraParams)')
    print('  SessionTokenDataList getTokens()')
    print('  SessionTokenData newToken(string description)')
    print('  bool removeToken(string token)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = codeCheckerAuthentication.Client(protocol)
transport.open()

if cmd == 'checkAPIVersion':
    if len(args) != 0:
        print('checkAPIVersion requires 0 args')
        sys.exit(1)
    pp.pprint(client.checkAPIVersion())

elif cmd == 'getAuthParameters':
    if len(args) != 0:
        print('getAuthParameters requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAuthParameters())

elif cmd == 'getAcceptedAuthMethods':
    if len(args) != 0:
        print('getAcceptedAuthMethods requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAcceptedAuthMethods())

elif cmd == 'performLogin':
    if len(args) != 2:
        print('performLogin requires 2 args')
        sys.exit(1)
    pp.pprint(client.performLogin(args[0], args[1],))

elif cmd == 'destroySession':
    if len(args) != 0:
        print('destroySession requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroySession())

elif cmd == 'getLoggedInUser':
    if len(args) != 0:
        print('getLoggedInUser requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLoggedInUser())

elif cmd == 'getPermissions':
    if len(args) != 1:
        print('getPermissions requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPermissions(args[0],))

elif cmd == 'getPermissionsForUser':
    if len(args) != 3:
        print('getPermissionsForUser requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPermissionsForUser(args[0], args[1], eval(args[2]),))

elif cmd == 'getAuthorisedNames':
    if len(args) != 2:
        print('getAuthorisedNames requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAuthorisedNames(eval(args[0]), args[1],))

elif cmd == 'addPermission':
    if len(args) != 4:
        print('addPermission requires 4 args')
        sys.exit(1)
    pp.pprint(client.addPermission(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'removePermission':
    if len(args) != 4:
        print('removePermission requires 4 args')
        sys.exit(1)
    pp.pprint(client.removePermission(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'hasPermission':
    if len(args) != 2:
        print('hasPermission requires 2 args')
        sys.exit(1)
    pp.pprint(client.hasPermission(eval(args[0]), args[1],))

elif cmd == 'getTokens':
    if len(args) != 0:
        print('getTokens requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTokens())

elif cmd == 'newToken':
    if len(args) != 1:
        print('newToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.newToken(args[0],))

elif cmd == 'removeToken':
    if len(args) != 1:
        print('removeToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeToken(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
