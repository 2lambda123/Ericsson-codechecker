//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof codeCheckerProductManagement_v6 === 'undefined') {
  codeCheckerProductManagement_v6 = {};
}
codeCheckerProductManagement_v6.DatabaseConnection = function(args) {
  this.engine = null;
  this.host = null;
  this.port = null;
  this.username_b64 = null;
  this.password_b64 = null;
  this.database = null;
  if (args) {
    if (args.engine !== undefined && args.engine !== null) {
      this.engine = args.engine;
    }
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.username_b64 !== undefined && args.username_b64 !== null) {
      this.username_b64 = args.username_b64;
    }
    if (args.password_b64 !== undefined && args.password_b64 !== null) {
      this.password_b64 = args.password_b64;
    }
    if (args.database !== undefined && args.database !== null) {
      this.database = args.database;
    }
  }
};
codeCheckerProductManagement_v6.DatabaseConnection.prototype = {};
codeCheckerProductManagement_v6.DatabaseConnection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.engine = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username_b64 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.password_b64 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.database = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.DatabaseConnection.prototype.write = function(output) {
  output.writeStructBegin('DatabaseConnection');
  if (this.engine !== null && this.engine !== undefined) {
    output.writeFieldBegin('engine', Thrift.Type.STRING, 1);
    output.writeString(this.engine);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 2);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.username_b64 !== null && this.username_b64 !== undefined) {
    output.writeFieldBegin('username_b64', Thrift.Type.STRING, 4);
    output.writeString(this.username_b64);
    output.writeFieldEnd();
  }
  if (this.password_b64 !== null && this.password_b64 !== undefined) {
    output.writeFieldBegin('password_b64', Thrift.Type.STRING, 5);
    output.writeString(this.password_b64);
    output.writeFieldEnd();
  }
  if (this.database !== null && this.database !== undefined) {
    output.writeFieldBegin('database', Thrift.Type.STRING, 6);
    output.writeString(this.database);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.ProductConfiguration = function(args) {
  this.id = null;
  this.endpoint = null;
  this.displayedName_b64 = null;
  this.description_b64 = null;
  this.connection = null;
  this.runLimit = null;
  this.isReviewStatusChangeDisabled = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.endpoint !== undefined && args.endpoint !== null) {
      this.endpoint = args.endpoint;
    }
    if (args.displayedName_b64 !== undefined && args.displayedName_b64 !== null) {
      this.displayedName_b64 = args.displayedName_b64;
    }
    if (args.description_b64 !== undefined && args.description_b64 !== null) {
      this.description_b64 = args.description_b64;
    }
    if (args.connection !== undefined && args.connection !== null) {
      this.connection = new codeCheckerProductManagement_v6.DatabaseConnection(args.connection);
    }
    if (args.runLimit !== undefined && args.runLimit !== null) {
      this.runLimit = args.runLimit;
    }
    if (args.isReviewStatusChangeDisabled !== undefined && args.isReviewStatusChangeDisabled !== null) {
      this.isReviewStatusChangeDisabled = args.isReviewStatusChangeDisabled;
    }
  }
};
codeCheckerProductManagement_v6.ProductConfiguration.prototype = {};
codeCheckerProductManagement_v6.ProductConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endpoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayedName_b64 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description_b64 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.connection = new codeCheckerProductManagement_v6.DatabaseConnection();
        this.connection.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.runLimit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isReviewStatusChangeDisabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.ProductConfiguration.prototype.write = function(output) {
  output.writeStructBegin('ProductConfiguration');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRING, 2);
    output.writeString(this.endpoint);
    output.writeFieldEnd();
  }
  if (this.displayedName_b64 !== null && this.displayedName_b64 !== undefined) {
    output.writeFieldBegin('displayedName_b64', Thrift.Type.STRING, 3);
    output.writeString(this.displayedName_b64);
    output.writeFieldEnd();
  }
  if (this.description_b64 !== null && this.description_b64 !== undefined) {
    output.writeFieldBegin('description_b64', Thrift.Type.STRING, 4);
    output.writeString(this.description_b64);
    output.writeFieldEnd();
  }
  if (this.connection !== null && this.connection !== undefined) {
    output.writeFieldBegin('connection', Thrift.Type.STRUCT, 5);
    this.connection.write(output);
    output.writeFieldEnd();
  }
  if (this.runLimit !== null && this.runLimit !== undefined) {
    output.writeFieldBegin('runLimit', Thrift.Type.I64, 6);
    output.writeI64(this.runLimit);
    output.writeFieldEnd();
  }
  if (this.isReviewStatusChangeDisabled !== null && this.isReviewStatusChangeDisabled !== undefined) {
    output.writeFieldBegin('isReviewStatusChangeDisabled', Thrift.Type.BOOL, 7);
    output.writeBool(this.isReviewStatusChangeDisabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.Product = function(args) {
  this.id = null;
  this.endpoint = null;
  this.displayedName_b64 = null;
  this.description_b64 = null;
  this.connected = null;
  this.accessible = null;
  this.administrating = null;
  this.databaseStatus = null;
  this.runCount = null;
  this.latestStoreToProduct = null;
  this.runLimit = null;
  this.admins = null;
  this.runStoreInProgress = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.endpoint !== undefined && args.endpoint !== null) {
      this.endpoint = args.endpoint;
    }
    if (args.displayedName_b64 !== undefined && args.displayedName_b64 !== null) {
      this.displayedName_b64 = args.displayedName_b64;
    }
    if (args.description_b64 !== undefined && args.description_b64 !== null) {
      this.description_b64 = args.description_b64;
    }
    if (args.connected !== undefined && args.connected !== null) {
      this.connected = args.connected;
    }
    if (args.accessible !== undefined && args.accessible !== null) {
      this.accessible = args.accessible;
    }
    if (args.administrating !== undefined && args.administrating !== null) {
      this.administrating = args.administrating;
    }
    if (args.databaseStatus !== undefined && args.databaseStatus !== null) {
      this.databaseStatus = args.databaseStatus;
    }
    if (args.runCount !== undefined && args.runCount !== null) {
      this.runCount = args.runCount;
    }
    if (args.latestStoreToProduct !== undefined && args.latestStoreToProduct !== null) {
      this.latestStoreToProduct = args.latestStoreToProduct;
    }
    if (args.runLimit !== undefined && args.runLimit !== null) {
      this.runLimit = args.runLimit;
    }
    if (args.admins !== undefined && args.admins !== null) {
      this.admins = Thrift.copyList(args.admins, [null]);
    }
    if (args.runStoreInProgress !== undefined && args.runStoreInProgress !== null) {
      this.runStoreInProgress = Thrift.copyList(args.runStoreInProgress, [null]);
    }
  }
};
codeCheckerProductManagement_v6.Product.prototype = {};
codeCheckerProductManagement_v6.Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endpoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayedName_b64 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description_b64 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.connected = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.accessible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.administrating = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.databaseStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.runCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.latestStoreToProduct = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.runLimit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.admins = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.admins.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.runStoreInProgress = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.runStoreInProgress.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRING, 2);
    output.writeString(this.endpoint);
    output.writeFieldEnd();
  }
  if (this.displayedName_b64 !== null && this.displayedName_b64 !== undefined) {
    output.writeFieldBegin('displayedName_b64', Thrift.Type.STRING, 3);
    output.writeString(this.displayedName_b64);
    output.writeFieldEnd();
  }
  if (this.description_b64 !== null && this.description_b64 !== undefined) {
    output.writeFieldBegin('description_b64', Thrift.Type.STRING, 4);
    output.writeString(this.description_b64);
    output.writeFieldEnd();
  }
  if (this.connected !== null && this.connected !== undefined) {
    output.writeFieldBegin('connected', Thrift.Type.BOOL, 5);
    output.writeBool(this.connected);
    output.writeFieldEnd();
  }
  if (this.accessible !== null && this.accessible !== undefined) {
    output.writeFieldBegin('accessible', Thrift.Type.BOOL, 6);
    output.writeBool(this.accessible);
    output.writeFieldEnd();
  }
  if (this.administrating !== null && this.administrating !== undefined) {
    output.writeFieldBegin('administrating', Thrift.Type.BOOL, 7);
    output.writeBool(this.administrating);
    output.writeFieldEnd();
  }
  if (this.databaseStatus !== null && this.databaseStatus !== undefined) {
    output.writeFieldBegin('databaseStatus', Thrift.Type.I32, 8);
    output.writeI32(this.databaseStatus);
    output.writeFieldEnd();
  }
  if (this.runCount !== null && this.runCount !== undefined) {
    output.writeFieldBegin('runCount', Thrift.Type.I64, 9);
    output.writeI64(this.runCount);
    output.writeFieldEnd();
  }
  if (this.latestStoreToProduct !== null && this.latestStoreToProduct !== undefined) {
    output.writeFieldBegin('latestStoreToProduct', Thrift.Type.STRING, 10);
    output.writeString(this.latestStoreToProduct);
    output.writeFieldEnd();
  }
  if (this.runLimit !== null && this.runLimit !== undefined) {
    output.writeFieldBegin('runLimit', Thrift.Type.I64, 11);
    output.writeI64(this.runLimit);
    output.writeFieldEnd();
  }
  if (this.admins !== null && this.admins !== undefined) {
    output.writeFieldBegin('admins', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.admins.length);
    for (var iter14 in this.admins)
    {
      if (this.admins.hasOwnProperty(iter14))
      {
        iter14 = this.admins[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.runStoreInProgress !== null && this.runStoreInProgress !== undefined) {
    output.writeFieldBegin('runStoreInProgress', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.runStoreInProgress.length);
    for (var iter15 in this.runStoreInProgress)
    {
      if (this.runStoreInProgress.hasOwnProperty(iter15))
      {
        iter15 = this.runStoreInProgress[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

