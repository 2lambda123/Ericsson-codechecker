//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof codeCheckerDBAccess_v6 === 'undefined') {
  codeCheckerDBAccess_v6 = {};
}
codeCheckerDBAccess_v6.DetectionStatus = {
  'NEW' : 0,
  'RESOLVED' : 1,
  'UNRESOLVED' : 2,
  'REOPENED' : 3,
  'OFF' : 4,
  'UNAVAILABLE' : 5
};
codeCheckerDBAccess_v6.DiffType = {
  'NEW' : 0,
  'RESOLVED' : 1,
  'UNRESOLVED' : 2
};
codeCheckerDBAccess_v6.Encoding = {
  'DEFAULT' : 0,
  'BASE64' : 1
};
codeCheckerDBAccess_v6.Order = {
  'ASC' : 0,
  'DESC' : 1
};
codeCheckerDBAccess_v6.ReviewStatus = {
  'UNREVIEWED' : 0,
  'CONFIRMED' : 1,
  'FALSE_POSITIVE' : 2,
  'INTENTIONAL' : 3
};
codeCheckerDBAccess_v6.Severity = {
  'UNSPECIFIED' : 0,
  'STYLE' : 10,
  'LOW' : 20,
  'MEDIUM' : 30,
  'HIGH' : 40,
  'CRITICAL' : 50
};
codeCheckerDBAccess_v6.SortType = {
  'FILENAME' : 0,
  'CHECKER_NAME' : 1,
  'SEVERITY' : 2,
  'REVIEW_STATUS' : 3,
  'DETECTION_STATUS' : 4,
  'BUG_PATH_LENGTH' : 5
};
codeCheckerDBAccess_v6.StoreLimitKind = {
  'FAILURE_ZIP_SIZE' : 0,
  'COMPILATION_DATABASE_SIZE' : 1
};
codeCheckerDBAccess_v6.ExtendedReportDataType = {
  'NOTE' : 0,
  'MACRO' : 10,
  'FIXIT' : 20
};
codeCheckerDBAccess_v6.SourceFileData = function(args) {
  this.fileId = null;
  this.filePath = null;
  this.fileContent = null;
  if (args) {
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
    if (args.fileContent !== undefined && args.fileContent !== null) {
      this.fileContent = args.fileContent;
    }
  }
};
codeCheckerDBAccess_v6.SourceFileData.prototype = {};
codeCheckerDBAccess_v6.SourceFileData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileContent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.SourceFileData.prototype.write = function(output) {
  output.writeStructBegin('SourceFileData');
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 1);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 2);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  if (this.fileContent !== null && this.fileContent !== undefined) {
    output.writeFieldBegin('fileContent', Thrift.Type.STRING, 3);
    output.writeString(this.fileContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.SortMode = function(args) {
  this.type = null;
  this.ord = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.ord !== undefined && args.ord !== null) {
      this.ord = args.ord;
    }
  }
};
codeCheckerDBAccess_v6.SortMode.prototype = {};
codeCheckerDBAccess_v6.SortMode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ord = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.SortMode.prototype.write = function(output) {
  output.writeStructBegin('SortMode');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.ord !== null && this.ord !== undefined) {
    output.writeFieldBegin('ord', Thrift.Type.I32, 2);
    output.writeI32(this.ord);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.BugPathEvent = function(args) {
  this.startLine = null;
  this.startCol = null;
  this.endLine = null;
  this.endCol = null;
  this.msg = null;
  this.fileId = null;
  this.filePath = null;
  if (args) {
    if (args.startLine !== undefined && args.startLine !== null) {
      this.startLine = args.startLine;
    }
    if (args.startCol !== undefined && args.startCol !== null) {
      this.startCol = args.startCol;
    }
    if (args.endLine !== undefined && args.endLine !== null) {
      this.endLine = args.endLine;
    }
    if (args.endCol !== undefined && args.endCol !== null) {
      this.endCol = args.endCol;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
  }
};
codeCheckerDBAccess_v6.BugPathEvent.prototype = {};
codeCheckerDBAccess_v6.BugPathEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startLine = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startCol = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endLine = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endCol = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.BugPathEvent.prototype.write = function(output) {
  output.writeStructBegin('BugPathEvent');
  if (this.startLine !== null && this.startLine !== undefined) {
    output.writeFieldBegin('startLine', Thrift.Type.I64, 1);
    output.writeI64(this.startLine);
    output.writeFieldEnd();
  }
  if (this.startCol !== null && this.startCol !== undefined) {
    output.writeFieldBegin('startCol', Thrift.Type.I64, 2);
    output.writeI64(this.startCol);
    output.writeFieldEnd();
  }
  if (this.endLine !== null && this.endLine !== undefined) {
    output.writeFieldBegin('endLine', Thrift.Type.I64, 3);
    output.writeI64(this.endLine);
    output.writeFieldEnd();
  }
  if (this.endCol !== null && this.endCol !== undefined) {
    output.writeFieldBegin('endCol', Thrift.Type.I64, 4);
    output.writeI64(this.endCol);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 5);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 6);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 7);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.BugPathPos = function(args) {
  this.startLine = null;
  this.startCol = null;
  this.endLine = null;
  this.endCol = null;
  this.fileId = null;
  this.filePath = null;
  if (args) {
    if (args.startLine !== undefined && args.startLine !== null) {
      this.startLine = args.startLine;
    }
    if (args.startCol !== undefined && args.startCol !== null) {
      this.startCol = args.startCol;
    }
    if (args.endLine !== undefined && args.endLine !== null) {
      this.endLine = args.endLine;
    }
    if (args.endCol !== undefined && args.endCol !== null) {
      this.endCol = args.endCol;
    }
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
  }
};
codeCheckerDBAccess_v6.BugPathPos.prototype = {};
codeCheckerDBAccess_v6.BugPathPos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startLine = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startCol = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endLine = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endCol = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.BugPathPos.prototype.write = function(output) {
  output.writeStructBegin('BugPathPos');
  if (this.startLine !== null && this.startLine !== undefined) {
    output.writeFieldBegin('startLine', Thrift.Type.I64, 1);
    output.writeI64(this.startLine);
    output.writeFieldEnd();
  }
  if (this.startCol !== null && this.startCol !== undefined) {
    output.writeFieldBegin('startCol', Thrift.Type.I64, 2);
    output.writeI64(this.startCol);
    output.writeFieldEnd();
  }
  if (this.endLine !== null && this.endLine !== undefined) {
    output.writeFieldBegin('endLine', Thrift.Type.I64, 3);
    output.writeI64(this.endLine);
    output.writeFieldEnd();
  }
  if (this.endCol !== null && this.endCol !== undefined) {
    output.writeFieldBegin('endCol', Thrift.Type.I64, 4);
    output.writeI64(this.endCol);
    output.writeFieldEnd();
  }
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 5);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 6);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.ExtendedReportData = function(args) {
  this.type = null;
  this.startLine = null;
  this.startCol = null;
  this.endLine = null;
  this.endCol = null;
  this.message = null;
  this.fileId = null;
  this.filePath = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.startLine !== undefined && args.startLine !== null) {
      this.startLine = args.startLine;
    }
    if (args.startCol !== undefined && args.startCol !== null) {
      this.startCol = args.startCol;
    }
    if (args.endLine !== undefined && args.endLine !== null) {
      this.endLine = args.endLine;
    }
    if (args.endCol !== undefined && args.endCol !== null) {
      this.endCol = args.endCol;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
  }
};
codeCheckerDBAccess_v6.ExtendedReportData.prototype = {};
codeCheckerDBAccess_v6.ExtendedReportData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startLine = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startCol = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endLine = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.endCol = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.ExtendedReportData.prototype.write = function(output) {
  output.writeStructBegin('ExtendedReportData');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.startLine !== null && this.startLine !== undefined) {
    output.writeFieldBegin('startLine', Thrift.Type.I64, 2);
    output.writeI64(this.startLine);
    output.writeFieldEnd();
  }
  if (this.startCol !== null && this.startCol !== undefined) {
    output.writeFieldBegin('startCol', Thrift.Type.I64, 3);
    output.writeI64(this.startCol);
    output.writeFieldEnd();
  }
  if (this.endLine !== null && this.endLine !== undefined) {
    output.writeFieldBegin('endLine', Thrift.Type.I64, 4);
    output.writeI64(this.endLine);
    output.writeFieldEnd();
  }
  if (this.endCol !== null && this.endCol !== undefined) {
    output.writeFieldBegin('endCol', Thrift.Type.I64, 5);
    output.writeI64(this.endCol);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 7);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 8);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReportDetails = function(args) {
  this.pathEvents = null;
  this.executionPath = null;
  this.extendedData = null;
  if (args) {
    if (args.pathEvents !== undefined && args.pathEvents !== null) {
      this.pathEvents = Thrift.copyList(args.pathEvents, [codeCheckerDBAccess_v6.BugPathEvent]);
    }
    if (args.executionPath !== undefined && args.executionPath !== null) {
      this.executionPath = Thrift.copyList(args.executionPath, [codeCheckerDBAccess_v6.BugPathPos]);
    }
    if (args.extendedData !== undefined && args.extendedData !== null) {
      this.extendedData = Thrift.copyList(args.extendedData, [codeCheckerDBAccess_v6.ExtendedReportData]);
    }
  }
};
codeCheckerDBAccess_v6.ReportDetails.prototype = {};
codeCheckerDBAccess_v6.ReportDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.pathEvents = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new codeCheckerDBAccess_v6.BugPathEvent();
          elem6.read(input);
          this.pathEvents.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.executionPath = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new codeCheckerDBAccess_v6.BugPathPos();
          elem13.read(input);
          this.executionPath.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.extendedData = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new codeCheckerDBAccess_v6.ExtendedReportData();
          elem20.read(input);
          this.extendedData.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReportDetails.prototype.write = function(output) {
  output.writeStructBegin('ReportDetails');
  if (this.pathEvents !== null && this.pathEvents !== undefined) {
    output.writeFieldBegin('pathEvents', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.pathEvents.length);
    for (var iter21 in this.pathEvents)
    {
      if (this.pathEvents.hasOwnProperty(iter21))
      {
        iter21 = this.pathEvents[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionPath !== null && this.executionPath !== undefined) {
    output.writeFieldBegin('executionPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.executionPath.length);
    for (var iter22 in this.executionPath)
    {
      if (this.executionPath.hasOwnProperty(iter22))
      {
        iter22 = this.executionPath[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extendedData !== null && this.extendedData !== undefined) {
    output.writeFieldBegin('extendedData', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.extendedData.length);
    for (var iter23 in this.extendedData)
    {
      if (this.extendedData.hasOwnProperty(iter23))
      {
        iter23 = this.extendedData[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.AnalyzerStatistics = function(args) {
  this.version = null;
  this.failed = null;
  this.successful = null;
  this.failedFilePaths = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = args.failed;
    }
    if (args.successful !== undefined && args.successful !== null) {
      this.successful = args.successful;
    }
    if (args.failedFilePaths !== undefined && args.failedFilePaths !== null) {
      this.failedFilePaths = Thrift.copyList(args.failedFilePaths, [null]);
    }
  }
};
codeCheckerDBAccess_v6.AnalyzerStatistics.prototype = {};
codeCheckerDBAccess_v6.AnalyzerStatistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.failed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.successful = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.failedFilePaths = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString().value;
          this.failedFilePaths.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.AnalyzerStatistics.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerStatistics');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.I64, 2);
    output.writeI64(this.failed);
    output.writeFieldEnd();
  }
  if (this.successful !== null && this.successful !== undefined) {
    output.writeFieldBegin('successful', Thrift.Type.I64, 3);
    output.writeI64(this.successful);
    output.writeFieldEnd();
  }
  if (this.failedFilePaths !== null && this.failedFilePaths !== undefined) {
    output.writeFieldBegin('failedFilePaths', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.failedFilePaths.length);
    for (var iter31 in this.failedFilePaths)
    {
      if (this.failedFilePaths.hasOwnProperty(iter31))
      {
        iter31 = this.failedFilePaths[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunData = function(args) {
  this.runId = null;
  this.runDate = null;
  this.name = null;
  this.duration = null;
  this.resultCount = null;
  this.runCmd = null;
  this.detectionStatusCount = null;
  this.versionTag = null;
  this.codeCheckerVersion = null;
  this.analyzerStatistics = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
    if (args.runDate !== undefined && args.runDate !== null) {
      this.runDate = args.runDate;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.resultCount !== undefined && args.resultCount !== null) {
      this.resultCount = args.resultCount;
    }
    if (args.runCmd !== undefined && args.runCmd !== null) {
      this.runCmd = args.runCmd;
    }
    if (args.detectionStatusCount !== undefined && args.detectionStatusCount !== null) {
      this.detectionStatusCount = Thrift.copyMap(args.detectionStatusCount, [null]);
    }
    if (args.versionTag !== undefined && args.versionTag !== null) {
      this.versionTag = args.versionTag;
    }
    if (args.codeCheckerVersion !== undefined && args.codeCheckerVersion !== null) {
      this.codeCheckerVersion = args.codeCheckerVersion;
    }
    if (args.analyzerStatistics !== undefined && args.analyzerStatistics !== null) {
      this.analyzerStatistics = Thrift.copyMap(args.analyzerStatistics, [codeCheckerDBAccess_v6.AnalyzerStatistics]);
    }
  }
};
codeCheckerDBAccess_v6.RunData.prototype = {};
codeCheckerDBAccess_v6.RunData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.runDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.resultCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.runCmd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.detectionStatusCount = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          if (_i37 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key38 = null;
          var val39 = null;
          key38 = input.readI32().value;
          val39 = input.readI32().value;
          this.detectionStatusCount[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.codeCheckerVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size40 = 0;
        var _rtmp344;
        this.analyzerStatistics = {};
        var _ktype41 = 0;
        var _vtype42 = 0;
        _rtmp344 = input.readMapBegin();
        _ktype41 = _rtmp344.ktype;
        _vtype42 = _rtmp344.vtype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          if (_i45 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key46 = null;
          var val47 = null;
          key46 = input.readString().value;
          val47 = new codeCheckerDBAccess_v6.AnalyzerStatistics();
          val47.read(input);
          this.analyzerStatistics[key46] = val47;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunData.prototype.write = function(output) {
  output.writeStructBegin('RunData');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 1);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  if (this.runDate !== null && this.runDate !== undefined) {
    output.writeFieldBegin('runDate', Thrift.Type.STRING, 2);
    output.writeString(this.runDate);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 4);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.resultCount !== null && this.resultCount !== undefined) {
    output.writeFieldBegin('resultCount', Thrift.Type.I64, 5);
    output.writeI64(this.resultCount);
    output.writeFieldEnd();
  }
  if (this.runCmd !== null && this.runCmd !== undefined) {
    output.writeFieldBegin('runCmd', Thrift.Type.STRING, 6);
    output.writeString(this.runCmd);
    output.writeFieldEnd();
  }
  if (this.detectionStatusCount !== null && this.detectionStatusCount !== undefined) {
    output.writeFieldBegin('detectionStatusCount', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.detectionStatusCount));
    for (var kiter48 in this.detectionStatusCount)
    {
      if (this.detectionStatusCount.hasOwnProperty(kiter48))
      {
        var viter49 = this.detectionStatusCount[kiter48];
        output.writeI32(kiter48);
        output.writeI32(viter49);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 8);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.codeCheckerVersion !== null && this.codeCheckerVersion !== undefined) {
    output.writeFieldBegin('codeCheckerVersion', Thrift.Type.STRING, 9);
    output.writeString(this.codeCheckerVersion);
    output.writeFieldEnd();
  }
  if (this.analyzerStatistics !== null && this.analyzerStatistics !== undefined) {
    output.writeFieldBegin('analyzerStatistics', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.analyzerStatistics));
    for (var kiter50 in this.analyzerStatistics)
    {
      if (this.analyzerStatistics.hasOwnProperty(kiter50))
      {
        var viter51 = this.analyzerStatistics[kiter50];
        output.writeString(kiter50);
        viter51.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunHistoryData = function(args) {
  this.runId = null;
  this.runName = null;
  this.versionTag = null;
  this.user = null;
  this.time = null;
  this.id = null;
  this.checkCommand = null;
  this.codeCheckerVersion = null;
  this.analyzerStatistics = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
    if (args.runName !== undefined && args.runName !== null) {
      this.runName = args.runName;
    }
    if (args.versionTag !== undefined && args.versionTag !== null) {
      this.versionTag = args.versionTag;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.checkCommand !== undefined && args.checkCommand !== null) {
      this.checkCommand = args.checkCommand;
    }
    if (args.codeCheckerVersion !== undefined && args.codeCheckerVersion !== null) {
      this.codeCheckerVersion = args.codeCheckerVersion;
    }
    if (args.analyzerStatistics !== undefined && args.analyzerStatistics !== null) {
      this.analyzerStatistics = Thrift.copyMap(args.analyzerStatistics, [codeCheckerDBAccess_v6.AnalyzerStatistics]);
    }
  }
};
codeCheckerDBAccess_v6.RunHistoryData.prototype = {};
codeCheckerDBAccess_v6.RunHistoryData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.runName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.checkCommand = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.codeCheckerVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size52 = 0;
        var _rtmp356;
        this.analyzerStatistics = {};
        var _ktype53 = 0;
        var _vtype54 = 0;
        _rtmp356 = input.readMapBegin();
        _ktype53 = _rtmp356.ktype;
        _vtype54 = _rtmp356.vtype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          if (_i57 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key58 = null;
          var val59 = null;
          key58 = input.readString().value;
          val59 = new codeCheckerDBAccess_v6.AnalyzerStatistics();
          val59.read(input);
          this.analyzerStatistics[key58] = val59;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunHistoryData.prototype.write = function(output) {
  output.writeStructBegin('RunHistoryData');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 1);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  if (this.runName !== null && this.runName !== undefined) {
    output.writeFieldBegin('runName', Thrift.Type.STRING, 2);
    output.writeString(this.runName);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 3);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 4);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 5);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 6);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.checkCommand !== null && this.checkCommand !== undefined) {
    output.writeFieldBegin('checkCommand', Thrift.Type.STRING, 7);
    output.writeString(this.checkCommand);
    output.writeFieldEnd();
  }
  if (this.codeCheckerVersion !== null && this.codeCheckerVersion !== undefined) {
    output.writeFieldBegin('codeCheckerVersion', Thrift.Type.STRING, 8);
    output.writeString(this.codeCheckerVersion);
    output.writeFieldEnd();
  }
  if (this.analyzerStatistics !== null && this.analyzerStatistics !== undefined) {
    output.writeFieldBegin('analyzerStatistics', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.analyzerStatistics));
    for (var kiter60 in this.analyzerStatistics)
    {
      if (this.analyzerStatistics.hasOwnProperty(kiter60))
      {
        var viter61 = this.analyzerStatistics[kiter60];
        output.writeString(kiter60);
        viter61.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunHistoryFilter = function(args) {
  this.tagNames = null;
  if (args) {
    if (args.tagNames !== undefined && args.tagNames !== null) {
      this.tagNames = Thrift.copyList(args.tagNames, [null]);
    }
  }
};
codeCheckerDBAccess_v6.RunHistoryFilter.prototype = {};
codeCheckerDBAccess_v6.RunHistoryFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.tagNames = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readString().value;
          this.tagNames.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunHistoryFilter.prototype.write = function(output) {
  output.writeStructBegin('RunHistoryFilter');
  if (this.tagNames !== null && this.tagNames !== undefined) {
    output.writeFieldBegin('tagNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.tagNames.length);
    for (var iter69 in this.tagNames)
    {
      if (this.tagNames.hasOwnProperty(iter69))
      {
        iter69 = this.tagNames[iter69];
        output.writeString(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunTagCount = function(args) {
  this.time = null;
  this.name = null;
  this.count = null;
  this.id = null;
  this.runName = null;
  if (args) {
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.runName !== undefined && args.runName !== null) {
      this.runName = args.runName;
    }
  }
};
codeCheckerDBAccess_v6.RunTagCount.prototype = {};
codeCheckerDBAccess_v6.RunTagCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.runName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunTagCount.prototype.write = function(output) {
  output.writeStructBegin('RunTagCount');
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 1);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 3);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 4);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.runName !== null && this.runName !== undefined) {
    output.writeFieldBegin('runName', Thrift.Type.STRING, 5);
    output.writeString(this.runName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReviewData = function(args) {
  this.status = null;
  this.comment = null;
  this.author = null;
  this.date = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
  }
};
codeCheckerDBAccess_v6.ReviewData.prototype = {};
codeCheckerDBAccess_v6.ReviewData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReviewData.prototype.write = function(output) {
  output.writeStructBegin('ReviewData');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 2);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 3);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 4);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReportData = function(args) {
  this.runId = null;
  this.checkerId = null;
  this.bugHash = null;
  this.checkedFile = null;
  this.checkerMsg = null;
  this.reportId = null;
  this.fileId = null;
  this.line = null;
  this.column = null;
  this.severity = null;
  this.reviewData = null;
  this.detectionStatus = null;
  this.detectedAt = null;
  this.fixedAt = null;
  this.bugPathLength = null;
  this.details = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
    if (args.checkerId !== undefined && args.checkerId !== null) {
      this.checkerId = args.checkerId;
    }
    if (args.bugHash !== undefined && args.bugHash !== null) {
      this.bugHash = args.bugHash;
    }
    if (args.checkedFile !== undefined && args.checkedFile !== null) {
      this.checkedFile = args.checkedFile;
    }
    if (args.checkerMsg !== undefined && args.checkerMsg !== null) {
      this.checkerMsg = args.checkerMsg;
    }
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.line !== undefined && args.line !== null) {
      this.line = args.line;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.severity !== undefined && args.severity !== null) {
      this.severity = args.severity;
    }
    if (args.reviewData !== undefined && args.reviewData !== null) {
      this.reviewData = new codeCheckerDBAccess_v6.ReviewData(args.reviewData);
    }
    if (args.detectionStatus !== undefined && args.detectionStatus !== null) {
      this.detectionStatus = args.detectionStatus;
    }
    if (args.detectedAt !== undefined && args.detectedAt !== null) {
      this.detectedAt = args.detectedAt;
    }
    if (args.fixedAt !== undefined && args.fixedAt !== null) {
      this.fixedAt = args.fixedAt;
    }
    if (args.bugPathLength !== undefined && args.bugPathLength !== null) {
      this.bugPathLength = args.bugPathLength;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new codeCheckerDBAccess_v6.ReportDetails(args.details);
    }
  }
};
codeCheckerDBAccess_v6.ReportData.prototype = {};
codeCheckerDBAccess_v6.ReportData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.checkerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bugHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.checkedFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.checkerMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.line = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.column = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.severity = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.reviewData = new codeCheckerDBAccess_v6.ReviewData();
        this.reviewData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.detectionStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.detectedAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.fixedAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.bugPathLength = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new codeCheckerDBAccess_v6.ReportDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReportData.prototype.write = function(output) {
  output.writeStructBegin('ReportData');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 1);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  if (this.checkerId !== null && this.checkerId !== undefined) {
    output.writeFieldBegin('checkerId', Thrift.Type.STRING, 2);
    output.writeString(this.checkerId);
    output.writeFieldEnd();
  }
  if (this.bugHash !== null && this.bugHash !== undefined) {
    output.writeFieldBegin('bugHash', Thrift.Type.STRING, 3);
    output.writeString(this.bugHash);
    output.writeFieldEnd();
  }
  if (this.checkedFile !== null && this.checkedFile !== undefined) {
    output.writeFieldBegin('checkedFile', Thrift.Type.STRING, 4);
    output.writeString(this.checkedFile);
    output.writeFieldEnd();
  }
  if (this.checkerMsg !== null && this.checkerMsg !== undefined) {
    output.writeFieldBegin('checkerMsg', Thrift.Type.STRING, 5);
    output.writeString(this.checkerMsg);
    output.writeFieldEnd();
  }
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 6);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 7);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I64, 8);
    output.writeI64(this.line);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.I64, 9);
    output.writeI64(this.column);
    output.writeFieldEnd();
  }
  if (this.severity !== null && this.severity !== undefined) {
    output.writeFieldBegin('severity', Thrift.Type.I32, 10);
    output.writeI32(this.severity);
    output.writeFieldEnd();
  }
  if (this.reviewData !== null && this.reviewData !== undefined) {
    output.writeFieldBegin('reviewData', Thrift.Type.STRUCT, 11);
    this.reviewData.write(output);
    output.writeFieldEnd();
  }
  if (this.detectionStatus !== null && this.detectionStatus !== undefined) {
    output.writeFieldBegin('detectionStatus', Thrift.Type.I32, 12);
    output.writeI32(this.detectionStatus);
    output.writeFieldEnd();
  }
  if (this.detectedAt !== null && this.detectedAt !== undefined) {
    output.writeFieldBegin('detectedAt', Thrift.Type.STRING, 13);
    output.writeString(this.detectedAt);
    output.writeFieldEnd();
  }
  if (this.fixedAt !== null && this.fixedAt !== undefined) {
    output.writeFieldBegin('fixedAt', Thrift.Type.STRING, 14);
    output.writeString(this.fixedAt);
    output.writeFieldEnd();
  }
  if (this.bugPathLength !== null && this.bugPathLength !== undefined) {
    output.writeFieldBegin('bugPathLength', Thrift.Type.I64, 15);
    output.writeI64(this.bugPathLength);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 16);
    this.details.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.BugPathLengthRange = function(args) {
  this.min = null;
  this.max = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
  }
};
codeCheckerDBAccess_v6.BugPathLengthRange.prototype = {};
codeCheckerDBAccess_v6.BugPathLengthRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.min = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.max = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.BugPathLengthRange.prototype.write = function(output) {
  output.writeStructBegin('BugPathLengthRange');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I64, 1);
    output.writeI64(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I64, 2);
    output.writeI64(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReportFilter = function(args) {
  this.filepath = null;
  this.checkerMsg = null;
  this.checkerName = null;
  this.reportHash = null;
  this.severity = null;
  this.reviewStatus = null;
  this.detectionStatus = null;
  this.runHistoryTag = null;
  this.firstDetectionDate = null;
  this.fixDate = null;
  this.isUnique = null;
  this.runName = null;
  this.runTag = null;
  this.componentNames = null;
  this.bugPathLength = null;
  if (args) {
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = Thrift.copyList(args.filepath, [null]);
    }
    if (args.checkerMsg !== undefined && args.checkerMsg !== null) {
      this.checkerMsg = Thrift.copyList(args.checkerMsg, [null]);
    }
    if (args.checkerName !== undefined && args.checkerName !== null) {
      this.checkerName = Thrift.copyList(args.checkerName, [null]);
    }
    if (args.reportHash !== undefined && args.reportHash !== null) {
      this.reportHash = Thrift.copyList(args.reportHash, [null]);
    }
    if (args.severity !== undefined && args.severity !== null) {
      this.severity = Thrift.copyList(args.severity, [null]);
    }
    if (args.reviewStatus !== undefined && args.reviewStatus !== null) {
      this.reviewStatus = Thrift.copyList(args.reviewStatus, [null]);
    }
    if (args.detectionStatus !== undefined && args.detectionStatus !== null) {
      this.detectionStatus = Thrift.copyList(args.detectionStatus, [null]);
    }
    if (args.runHistoryTag !== undefined && args.runHistoryTag !== null) {
      this.runHistoryTag = Thrift.copyList(args.runHistoryTag, [null]);
    }
    if (args.firstDetectionDate !== undefined && args.firstDetectionDate !== null) {
      this.firstDetectionDate = args.firstDetectionDate;
    }
    if (args.fixDate !== undefined && args.fixDate !== null) {
      this.fixDate = args.fixDate;
    }
    if (args.isUnique !== undefined && args.isUnique !== null) {
      this.isUnique = args.isUnique;
    }
    if (args.runName !== undefined && args.runName !== null) {
      this.runName = Thrift.copyList(args.runName, [null]);
    }
    if (args.runTag !== undefined && args.runTag !== null) {
      this.runTag = Thrift.copyList(args.runTag, [null]);
    }
    if (args.componentNames !== undefined && args.componentNames !== null) {
      this.componentNames = Thrift.copyList(args.componentNames, [null]);
    }
    if (args.bugPathLength !== undefined && args.bugPathLength !== null) {
      this.bugPathLength = new codeCheckerDBAccess_v6.BugPathLengthRange(args.bugPathLength);
    }
  }
};
codeCheckerDBAccess_v6.ReportFilter.prototype = {};
codeCheckerDBAccess_v6.ReportFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.filepath = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString().value;
          this.filepath.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.checkerMsg = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = input.readString().value;
          this.checkerMsg.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.checkerName = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString().value;
          this.checkerName.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size91 = 0;
        var _rtmp395;
        this.reportHash = [];
        var _etype94 = 0;
        _rtmp395 = input.readListBegin();
        _etype94 = _rtmp395.etype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var elem97 = null;
          elem97 = input.readString().value;
          this.reportHash.push(elem97);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.severity = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readI32().value;
          this.severity.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size105 = 0;
        var _rtmp3109;
        this.reviewStatus = [];
        var _etype108 = 0;
        _rtmp3109 = input.readListBegin();
        _etype108 = _rtmp3109.etype;
        _size105 = _rtmp3109.size;
        for (var _i110 = 0; _i110 < _size105; ++_i110)
        {
          var elem111 = null;
          elem111 = input.readI32().value;
          this.reviewStatus.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.detectionStatus = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readI32().value;
          this.detectionStatus.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size119 = 0;
        var _rtmp3123;
        this.runHistoryTag = [];
        var _etype122 = 0;
        _rtmp3123 = input.readListBegin();
        _etype122 = _rtmp3123.etype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var elem125 = null;
          elem125 = input.readString().value;
          this.runHistoryTag.push(elem125);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.firstDetectionDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.fixDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.isUnique = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.runName = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = input.readString().value;
          this.runName.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size133 = 0;
        var _rtmp3137;
        this.runTag = [];
        var _etype136 = 0;
        _rtmp3137 = input.readListBegin();
        _etype136 = _rtmp3137.etype;
        _size133 = _rtmp3137.size;
        for (var _i138 = 0; _i138 < _size133; ++_i138)
        {
          var elem139 = null;
          elem139 = input.readI64().value;
          this.runTag.push(elem139);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.componentNames = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readString().value;
          this.componentNames.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.bugPathLength = new codeCheckerDBAccess_v6.BugPathLengthRange();
        this.bugPathLength.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.ReportFilter.prototype.write = function(output) {
  output.writeStructBegin('ReportFilter');
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.filepath.length);
    for (var iter147 in this.filepath)
    {
      if (this.filepath.hasOwnProperty(iter147))
      {
        iter147 = this.filepath[iter147];
        output.writeString(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.checkerMsg !== null && this.checkerMsg !== undefined) {
    output.writeFieldBegin('checkerMsg', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.checkerMsg.length);
    for (var iter148 in this.checkerMsg)
    {
      if (this.checkerMsg.hasOwnProperty(iter148))
      {
        iter148 = this.checkerMsg[iter148];
        output.writeString(iter148);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.checkerName !== null && this.checkerName !== undefined) {
    output.writeFieldBegin('checkerName', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.checkerName.length);
    for (var iter149 in this.checkerName)
    {
      if (this.checkerName.hasOwnProperty(iter149))
      {
        iter149 = this.checkerName[iter149];
        output.writeString(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportHash !== null && this.reportHash !== undefined) {
    output.writeFieldBegin('reportHash', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.reportHash.length);
    for (var iter150 in this.reportHash)
    {
      if (this.reportHash.hasOwnProperty(iter150))
      {
        iter150 = this.reportHash[iter150];
        output.writeString(iter150);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.severity !== null && this.severity !== undefined) {
    output.writeFieldBegin('severity', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.severity.length);
    for (var iter151 in this.severity)
    {
      if (this.severity.hasOwnProperty(iter151))
      {
        iter151 = this.severity[iter151];
        output.writeI32(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reviewStatus !== null && this.reviewStatus !== undefined) {
    output.writeFieldBegin('reviewStatus', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.reviewStatus.length);
    for (var iter152 in this.reviewStatus)
    {
      if (this.reviewStatus.hasOwnProperty(iter152))
      {
        iter152 = this.reviewStatus[iter152];
        output.writeI32(iter152);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.detectionStatus !== null && this.detectionStatus !== undefined) {
    output.writeFieldBegin('detectionStatus', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.detectionStatus.length);
    for (var iter153 in this.detectionStatus)
    {
      if (this.detectionStatus.hasOwnProperty(iter153))
      {
        iter153 = this.detectionStatus[iter153];
        output.writeI32(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.runHistoryTag !== null && this.runHistoryTag !== undefined) {
    output.writeFieldBegin('runHistoryTag', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.runHistoryTag.length);
    for (var iter154 in this.runHistoryTag)
    {
      if (this.runHistoryTag.hasOwnProperty(iter154))
      {
        iter154 = this.runHistoryTag[iter154];
        output.writeString(iter154);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.firstDetectionDate !== null && this.firstDetectionDate !== undefined) {
    output.writeFieldBegin('firstDetectionDate', Thrift.Type.I64, 9);
    output.writeI64(this.firstDetectionDate);
    output.writeFieldEnd();
  }
  if (this.fixDate !== null && this.fixDate !== undefined) {
    output.writeFieldBegin('fixDate', Thrift.Type.I64, 10);
    output.writeI64(this.fixDate);
    output.writeFieldEnd();
  }
  if (this.isUnique !== null && this.isUnique !== undefined) {
    output.writeFieldBegin('isUnique', Thrift.Type.BOOL, 11);
    output.writeBool(this.isUnique);
    output.writeFieldEnd();
  }
  if (this.runName !== null && this.runName !== undefined) {
    output.writeFieldBegin('runName', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.runName.length);
    for (var iter155 in this.runName)
    {
      if (this.runName.hasOwnProperty(iter155))
      {
        iter155 = this.runName[iter155];
        output.writeString(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.runTag !== null && this.runTag !== undefined) {
    output.writeFieldBegin('runTag', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.runTag.length);
    for (var iter156 in this.runTag)
    {
      if (this.runTag.hasOwnProperty(iter156))
      {
        iter156 = this.runTag[iter156];
        output.writeI64(iter156);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.componentNames !== null && this.componentNames !== undefined) {
    output.writeFieldBegin('componentNames', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.componentNames.length);
    for (var iter157 in this.componentNames)
    {
      if (this.componentNames.hasOwnProperty(iter157))
      {
        iter157 = this.componentNames[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bugPathLength !== null && this.bugPathLength !== undefined) {
    output.writeFieldBegin('bugPathLength', Thrift.Type.STRUCT, 15);
    this.bugPathLength.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunReportCount = function(args) {
  this.runId = null;
  this.name = null;
  this.reportCount = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.reportCount !== undefined && args.reportCount !== null) {
      this.reportCount = args.reportCount;
    }
  }
};
codeCheckerDBAccess_v6.RunReportCount.prototype = {};
codeCheckerDBAccess_v6.RunReportCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.reportCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunReportCount.prototype.write = function(output) {
  output.writeStructBegin('RunReportCount');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 1);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.reportCount !== null && this.reportCount !== undefined) {
    output.writeFieldBegin('reportCount', Thrift.Type.I64, 3);
    output.writeI64(this.reportCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.CheckerCount = function(args) {
  this.name = null;
  this.severity = null;
  this.count = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.severity !== undefined && args.severity !== null) {
      this.severity = args.severity;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
codeCheckerDBAccess_v6.CheckerCount.prototype = {};
codeCheckerDBAccess_v6.CheckerCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.severity = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.CheckerCount.prototype.write = function(output) {
  output.writeStructBegin('CheckerCount');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.severity !== null && this.severity !== undefined) {
    output.writeFieldBegin('severity', Thrift.Type.I32, 2);
    output.writeI32(this.severity);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 3);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.CommentData = function(args) {
  this.id = null;
  this.author = null;
  this.message = null;
  this.createdAt = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
  }
};
codeCheckerDBAccess_v6.CommentData.prototype = {};
codeCheckerDBAccess_v6.CommentData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.CommentData.prototype.write = function(output) {
  output.writeStructBegin('CommentData');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 2);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunFilter = function(args) {
  this.ids = null;
  this.names = null;
  this.exactMatch = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
    if (args.names !== undefined && args.names !== null) {
      this.names = Thrift.copyList(args.names, [null]);
    }
    if (args.exactMatch !== undefined && args.exactMatch !== null) {
      this.exactMatch = args.exactMatch;
    }
  }
};
codeCheckerDBAccess_v6.RunFilter.prototype = {};
codeCheckerDBAccess_v6.RunFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.ids = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = input.readI64().value;
          this.ids.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size165 = 0;
        var _rtmp3169;
        this.names = [];
        var _etype168 = 0;
        _rtmp3169 = input.readListBegin();
        _etype168 = _rtmp3169.etype;
        _size165 = _rtmp3169.size;
        for (var _i170 = 0; _i170 < _size165; ++_i170)
        {
          var elem171 = null;
          elem171 = input.readString().value;
          this.names.push(elem171);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.exactMatch = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.RunFilter.prototype.write = function(output) {
  output.writeStructBegin('RunFilter');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.ids.length);
    for (var iter172 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter172))
      {
        iter172 = this.ids[iter172];
        output.writeI64(iter172);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.names.length);
    for (var iter173 in this.names)
    {
      if (this.names.hasOwnProperty(iter173))
      {
        iter173 = this.names[iter173];
        output.writeString(iter173);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exactMatch !== null && this.exactMatch !== undefined) {
    output.writeFieldBegin('exactMatch', Thrift.Type.BOOL, 3);
    output.writeBool(this.exactMatch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.CompareData = function(args) {
  this.runIds = null;
  this.diffType = null;
  this.runTag = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.diffType !== undefined && args.diffType !== null) {
      this.diffType = args.diffType;
    }
    if (args.runTag !== undefined && args.runTag !== null) {
      this.runTag = Thrift.copyList(args.runTag, [null]);
    }
  }
};
codeCheckerDBAccess_v6.CompareData.prototype = {};
codeCheckerDBAccess_v6.CompareData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size174 = 0;
        var _rtmp3178;
        this.runIds = [];
        var _etype177 = 0;
        _rtmp3178 = input.readListBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = input.readI64().value;
          this.runIds.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.diffType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size181 = 0;
        var _rtmp3185;
        this.runTag = [];
        var _etype184 = 0;
        _rtmp3185 = input.readListBegin();
        _etype184 = _rtmp3185.etype;
        _size181 = _rtmp3185.size;
        for (var _i186 = 0; _i186 < _size181; ++_i186)
        {
          var elem187 = null;
          elem187 = input.readI64().value;
          this.runTag.push(elem187);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.CompareData.prototype.write = function(output) {
  output.writeStructBegin('CompareData');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter188 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter188))
      {
        iter188 = this.runIds[iter188];
        output.writeI64(iter188);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.diffType !== null && this.diffType !== undefined) {
    output.writeFieldBegin('diffType', Thrift.Type.I32, 2);
    output.writeI32(this.diffType);
    output.writeFieldEnd();
  }
  if (this.runTag !== null && this.runTag !== undefined) {
    output.writeFieldBegin('runTag', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.runTag.length);
    for (var iter189 in this.runTag)
    {
      if (this.runTag.hasOwnProperty(iter189))
      {
        iter189 = this.runTag[iter189];
        output.writeI64(iter189);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.LinesInFilesRequested = function(args) {
  this.fileId = null;
  this.lines = null;
  if (args) {
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.lines !== undefined && args.lines !== null) {
      this.lines = Thrift.copyList(args.lines, [null]);
    }
  }
};
codeCheckerDBAccess_v6.LinesInFilesRequested.prototype = {};
codeCheckerDBAccess_v6.LinesInFilesRequested.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size190 = 0;
        var _rtmp3194;
        this.lines = [];
        var _etype193 = 0;
        _rtmp3194 = input.readSetBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = input.readI64().value;
          this.lines.push(elem196);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.LinesInFilesRequested.prototype.write = function(output) {
  output.writeStructBegin('LinesInFilesRequested');
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 1);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.lines.length);
    for (var iter197 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter197))
      {
        iter197 = this.lines[iter197];
        output.writeI64(iter197);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.SourceComponentData = function(args) {
  this.name = null;
  this.value = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
codeCheckerDBAccess_v6.SourceComponentData.prototype = {};
codeCheckerDBAccess_v6.SourceComponentData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.SourceComponentData.prototype.write = function(output) {
  output.writeStructBegin('SourceComponentData');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.MAX_QUERY_SIZE = 500;
