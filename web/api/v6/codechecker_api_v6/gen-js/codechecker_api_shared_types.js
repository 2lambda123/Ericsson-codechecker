//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ErrorCode = {
  'DATABASE' : 0,
  'IOERROR' : 1,
  'GENERAL' : 2,
  'AUTH_DENIED' : 3,
  'UNAUTHORIZED' : 4,
  'API_MISMATCH' : 5,
  'SOURCE_FILE' : 6
};
Permission = {
  'SUPERUSER' : 1,
  'PRODUCT_ADMIN' : 16,
  'PRODUCT_ACCESS' : 17,
  'PRODUCT_STORE' : 18
};
DBStatus = {
  'OK' : 0,
  'MISSING' : 1,
  'FAILED_TO_CONNECT' : 2,
  'SCHEMA_MISMATCH_OK' : 3,
  'SCHEMA_MISMATCH_NO' : 4,
  'SCHEMA_MISSING' : 5,
  'SCHEMA_INIT_ERROR' : 6,
  'SCHEMA_UPGRADE_FAILED' : 7
};
RequestFailed = function(args) {
  this.errorCode = null;
  this.message = null;
  this.extraInfo = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.extraInfo !== undefined && args.extraInfo !== null) {
      this.extraInfo = Thrift.copyList(args.extraInfo, [null]);
    }
  }
};
Thrift.inherits(RequestFailed, Thrift.TException);
RequestFailed.prototype.name = 'RequestFailed';
RequestFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.extraInfo = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.extraInfo.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestFailed.prototype.write = function(output) {
  output.writeStructBegin('RequestFailed');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.extraInfo !== null && this.extraInfo !== undefined) {
    output.writeFieldBegin('extraInfo', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.extraInfo.length);
    for (var iter7 in this.extraInfo)
    {
      if (this.extraInfo.hasOwnProperty(iter7))
      {
        iter7 = this.extraInfo[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

