//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_args = function(args) {
  this.runFilter = null;
  this.limit = null;
  this.offset = null;
  if (args) {
    if (args.runFilter !== undefined && args.runFilter !== null) {
      this.runFilter = new codeCheckerDBAccess_v6.RunFilter(args.runFilter);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.runFilter = new codeCheckerDBAccess_v6.RunFilter();
        this.runFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunData_args');
  if (this.runFilter !== null && this.runFilter !== undefined) {
    output.writeFieldBegin('runFilter', Thrift.Type.STRUCT, 1);
    this.runFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 3);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.RunData]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size198 = 0;
        var _rtmp3202;
        this.success = [];
        var _etype201 = 0;
        _rtmp3202 = input.readListBegin();
        _etype201 = _rtmp3202.etype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var elem204 = null;
          elem204 = new codeCheckerDBAccess_v6.RunData();
          elem204.read(input);
          this.success.push(elem204);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter205 in this.success)
    {
      if (this.success.hasOwnProperty(iter205))
      {
        iter205 = this.success[iter205];
        iter205.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_args = function(args) {
  this.runFilter = null;
  if (args) {
    if (args.runFilter !== undefined && args.runFilter !== null) {
      this.runFilter = new codeCheckerDBAccess_v6.RunFilter(args.runFilter);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.runFilter = new codeCheckerDBAccess_v6.RunFilter();
        this.runFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunCount_args');
  if (this.runFilter !== null && this.runFilter !== undefined) {
    output.writeFieldBegin('runFilter', Thrift.Type.STRUCT, 1);
    this.runFilter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_args = function(args) {
  this.runHistoryId = null;
  this.runId = null;
  if (args) {
    if (args.runHistoryId !== undefined && args.runHistoryId !== null) {
      this.runHistoryId = args.runHistoryId;
    }
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runHistoryId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckCommand_args');
  if (this.runHistoryId !== null && this.runHistoryId !== undefined) {
    output.writeFieldBegin('runHistoryId', Thrift.Type.I64, 1);
    output.writeI64(this.runHistoryId);
    output.writeFieldEnd();
  }
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 2);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckCommand_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_args = function(args) {
  this.runIds = null;
  this.limit = null;
  this.offset = null;
  this.runHistoryFilter = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.runHistoryFilter !== undefined && args.runHistoryFilter !== null) {
      this.runHistoryFilter = new codeCheckerDBAccess_v6.RunHistoryFilter(args.runHistoryFilter);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.runIds = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = input.readI64().value;
          this.runIds.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.runHistoryFilter = new codeCheckerDBAccess_v6.RunHistoryFilter();
        this.runHistoryFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunHistory_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter213 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter213))
      {
        iter213 = this.runIds[iter213];
        output.writeI64(iter213);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 3);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.runHistoryFilter !== null && this.runHistoryFilter !== undefined) {
    output.writeFieldBegin('runHistoryFilter', Thrift.Type.STRUCT, 4);
    this.runHistoryFilter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.RunHistoryData]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size214 = 0;
        var _rtmp3218;
        this.success = [];
        var _etype217 = 0;
        _rtmp3218 = input.readListBegin();
        _etype217 = _rtmp3218.etype;
        _size214 = _rtmp3218.size;
        for (var _i219 = 0; _i219 < _size214; ++_i219)
        {
          var elem220 = null;
          elem220 = new codeCheckerDBAccess_v6.RunHistoryData();
          elem220.read(input);
          this.success.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter221 in this.success)
    {
      if (this.success.hasOwnProperty(iter221))
      {
        iter221 = this.success[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_args = function(args) {
  this.runIds = null;
  this.runHistoryFilter = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.runHistoryFilter !== undefined && args.runHistoryFilter !== null) {
      this.runHistoryFilter = new codeCheckerDBAccess_v6.RunHistoryFilter(args.runHistoryFilter);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size222 = 0;
        var _rtmp3226;
        this.runIds = [];
        var _etype225 = 0;
        _rtmp3226 = input.readListBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = input.readI64().value;
          this.runIds.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.runHistoryFilter = new codeCheckerDBAccess_v6.RunHistoryFilter();
        this.runHistoryFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunHistoryCount_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter229 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter229))
      {
        iter229 = this.runIds[iter229];
        output.writeI64(iter229);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.runHistoryFilter !== null && this.runHistoryFilter !== undefined) {
    output.writeFieldBegin('runHistoryFilter', Thrift.Type.STRUCT, 2);
    this.runHistoryFilter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunHistoryCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_args = function(args) {
  this.runIds = null;
  this.reportHashes = null;
  this.diffType = null;
  this.skipDetectionStatuses = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportHashes !== undefined && args.reportHashes !== null) {
      this.reportHashes = Thrift.copyList(args.reportHashes, [null]);
    }
    if (args.diffType !== undefined && args.diffType !== null) {
      this.diffType = args.diffType;
    }
    if (args.skipDetectionStatuses !== undefined && args.skipDetectionStatuses !== null) {
      this.skipDetectionStatuses = Thrift.copyList(args.skipDetectionStatuses, [null]);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size230 = 0;
        var _rtmp3234;
        this.runIds = [];
        var _etype233 = 0;
        _rtmp3234 = input.readListBegin();
        _etype233 = _rtmp3234.etype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var elem236 = null;
          elem236 = input.readI64().value;
          this.runIds.push(elem236);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size237 = 0;
        var _rtmp3241;
        this.reportHashes = [];
        var _etype240 = 0;
        _rtmp3241 = input.readListBegin();
        _etype240 = _rtmp3241.etype;
        _size237 = _rtmp3241.size;
        for (var _i242 = 0; _i242 < _size237; ++_i242)
        {
          var elem243 = null;
          elem243 = input.readString().value;
          this.reportHashes.push(elem243);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.diffType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.skipDetectionStatuses = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = input.readI32().value;
          this.skipDetectionStatuses.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getDiffResultsHash_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter251 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter251))
      {
        iter251 = this.runIds[iter251];
        output.writeI64(iter251);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportHashes !== null && this.reportHashes !== undefined) {
    output.writeFieldBegin('reportHashes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.reportHashes.length);
    for (var iter252 in this.reportHashes)
    {
      if (this.reportHashes.hasOwnProperty(iter252))
      {
        iter252 = this.reportHashes[iter252];
        output.writeString(iter252);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.diffType !== null && this.diffType !== undefined) {
    output.writeFieldBegin('diffType', Thrift.Type.I32, 3);
    output.writeI32(this.diffType);
    output.writeFieldEnd();
  }
  if (this.skipDetectionStatuses !== null && this.skipDetectionStatuses !== undefined) {
    output.writeFieldBegin('skipDetectionStatuses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.skipDetectionStatuses.length);
    for (var iter253 in this.skipDetectionStatuses)
    {
      if (this.skipDetectionStatuses.hasOwnProperty(iter253))
      {
        iter253 = this.skipDetectionStatuses[iter253];
        output.writeI32(iter253);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.success = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = input.readString().value;
          this.success.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getDiffResultsHash_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter261 in this.success)
    {
      if (this.success.hasOwnProperty(iter261))
      {
        iter261 = this.success[iter261];
        output.writeString(iter261);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_args = function(args) {
  this.reportId = null;
  if (args) {
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getReport_args');
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 1);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerDBAccess_v6.ReportData(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerDBAccess_v6.ReportData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getReport_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_args = function(args) {
  this.runIds = null;
  this.limit = null;
  this.offset = null;
  this.sortType = null;
  this.reportFilter = null;
  this.cmpData = null;
  this.getDetails = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.sortType !== undefined && args.sortType !== null) {
      this.sortType = Thrift.copyList(args.sortType, [codeCheckerDBAccess_v6.SortMode]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
    if (args.getDetails !== undefined && args.getDetails !== null) {
      this.getDetails = args.getDetails;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size262 = 0;
        var _rtmp3266;
        this.runIds = [];
        var _etype265 = 0;
        _rtmp3266 = input.readListBegin();
        _etype265 = _rtmp3266.etype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var elem268 = null;
          elem268 = input.readI64().value;
          this.runIds.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size269 = 0;
        var _rtmp3273;
        this.sortType = [];
        var _etype272 = 0;
        _rtmp3273 = input.readListBegin();
        _etype272 = _rtmp3273.etype;
        _size269 = _rtmp3273.size;
        for (var _i274 = 0; _i274 < _size269; ++_i274)
        {
          var elem275 = null;
          elem275 = new codeCheckerDBAccess_v6.SortMode();
          elem275.read(input);
          this.sortType.push(elem275);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.getDetails = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunResults_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter276 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter276))
      {
        iter276 = this.runIds[iter276];
        output.writeI64(iter276);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 2);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 3);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.sortType !== null && this.sortType !== undefined) {
    output.writeFieldBegin('sortType', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortType.length);
    for (var iter277 in this.sortType)
    {
      if (this.sortType.hasOwnProperty(iter277))
      {
        iter277 = this.sortType[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 5);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 6);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  if (this.getDetails !== null && this.getDetails !== undefined) {
    output.writeFieldBegin('getDetails', Thrift.Type.BOOL, 7);
    output.writeBool(this.getDetails);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.ReportData]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = new codeCheckerDBAccess_v6.ReportData();
          elem284.read(input);
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        iter285.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.limit = null;
  this.offset = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.runIds = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = input.readI64().value;
          this.runIds.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunReportCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter293 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter293))
      {
        iter293 = this.runIds[iter293];
        output.writeI64(iter293);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 3);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 4);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.RunReportCount]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.success = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = new codeCheckerDBAccess_v6.RunReportCount();
          elem300.read(input);
          this.success.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunReportCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter301 in this.success)
    {
      if (this.success.hasOwnProperty(iter301))
      {
        iter301 = this.success[iter301];
        iter301.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size302 = 0;
        var _rtmp3306;
        this.runIds = [];
        var _etype305 = 0;
        _rtmp3306 = input.readListBegin();
        _etype305 = _rtmp3306.etype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var elem308 = null;
          elem308 = input.readI64().value;
          this.runIds.push(elem308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunResultCount_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter309 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter309))
      {
        iter309 = this.runIds[iter309];
        output.writeI64(iter309);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunResultCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_args = function(args) {
  this.reportId = null;
  if (args) {
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getReportDetails_args');
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 1);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerDBAccess_v6.ReportDetails(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerDBAccess_v6.ReportDetails();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getReportDetails_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_args = function(args) {
  this.fileId = null;
  this.fileContent = null;
  this.encoding = null;
  if (args) {
    if (args.fileId !== undefined && args.fileId !== null) {
      this.fileId = args.fileId;
    }
    if (args.fileContent !== undefined && args.fileContent !== null) {
      this.fileContent = args.fileContent;
    }
    if (args.encoding !== undefined && args.encoding !== null) {
      this.encoding = args.encoding;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.fileId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.fileContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSourceFileData_args');
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.I64, 1);
    output.writeI64(this.fileId);
    output.writeFieldEnd();
  }
  if (this.fileContent !== null && this.fileContent !== undefined) {
    output.writeFieldBegin('fileContent', Thrift.Type.BOOL, 2);
    output.writeBool(this.fileContent);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 3);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerDBAccess_v6.SourceFileData(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerDBAccess_v6.SourceFileData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSourceFileData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_args = function(args) {
  this.linesInFilesRequested = null;
  this.encoding = null;
  if (args) {
    if (args.linesInFilesRequested !== undefined && args.linesInFilesRequested !== null) {
      this.linesInFilesRequested = Thrift.copyList(args.linesInFilesRequested, [codeCheckerDBAccess_v6.LinesInFilesRequested]);
    }
    if (args.encoding !== undefined && args.encoding !== null) {
      this.encoding = args.encoding;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.linesInFilesRequested = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = new codeCheckerDBAccess_v6.LinesInFilesRequested();
          elem316.read(input);
          this.linesInFilesRequested.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getLinesInSourceFileContents_args');
  if (this.linesInFilesRequested !== null && this.linesInFilesRequested !== undefined) {
    output.writeFieldBegin('linesInFilesRequested', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.linesInFilesRequested.length);
    for (var iter317 in this.linesInFilesRequested)
    {
      if (this.linesInFilesRequested.hasOwnProperty(iter317))
      {
        iter317 = this.linesInFilesRequested[iter317];
        iter317.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 2);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyMap, null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size318 = 0;
        var _rtmp3322;
        this.success = {};
        var _ktype319 = 0;
        var _vtype320 = 0;
        _rtmp3322 = input.readMapBegin();
        _ktype319 = _rtmp3322.ktype;
        _vtype320 = _rtmp3322.vtype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          if (_i323 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key324 = null;
          var val325 = null;
          key324 = input.readI64().value;
          var _size326 = 0;
          var _rtmp3330;
          val325 = {};
          var _ktype327 = 0;
          var _vtype328 = 0;
          _rtmp3330 = input.readMapBegin();
          _ktype327 = _rtmp3330.ktype;
          _vtype328 = _rtmp3330.vtype;
          _size326 = _rtmp3330.size;
          for (var _i331 = 0; _i331 < _size326; ++_i331)
          {
            if (_i331 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key332 = null;
            var val333 = null;
            key332 = input.readI64().value;
            val333 = input.readString().value;
            val325[key332] = val333;
          }
          input.readMapEnd();
          this.success[key324] = val325;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getLinesInSourceFileContents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter334 in this.success)
    {
      if (this.success.hasOwnProperty(kiter334))
      {
        var viter335 = this.success[kiter334];
        output.writeI64(kiter334);
        output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(viter335));
        for (var kiter336 in viter335)
        {
          if (viter335.hasOwnProperty(kiter336))
          {
            var viter337 = viter335[kiter336];
            output.writeI64(kiter336);
            output.writeString(viter337);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_args = function(args) {
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_isReviewStatusChangeDisabled_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_isReviewStatusChangeDisabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_args = function(args) {
  this.reportId = null;
  this.status = null;
  this.message = null;
  if (args) {
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_changeReviewStatus_args');
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 1);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_changeReviewStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_args = function(args) {
  this.reportId = null;
  if (args) {
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getComments_args');
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 1);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.CommentData]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.success = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = new codeCheckerDBAccess_v6.CommentData();
          elem344.read(input);
          this.success.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getComments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter345 in this.success)
    {
      if (this.success.hasOwnProperty(iter345))
      {
        iter345 = this.success[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_args = function(args) {
  this.reportId = null;
  if (args) {
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCommentCount_args');
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 1);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCommentCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_args = function(args) {
  this.reportId = null;
  this.comment = null;
  if (args) {
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = new codeCheckerDBAccess_v6.CommentData(args.comment);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.reportId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.comment = new codeCheckerDBAccess_v6.CommentData();
        this.comment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_addComment_args');
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.I64, 1);
    output.writeI64(this.reportId);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRUCT, 2);
    this.comment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_addComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_args = function(args) {
  this.commentId = null;
  this.newMessage = null;
  if (args) {
    if (args.commentId !== undefined && args.commentId !== null) {
      this.commentId = args.commentId;
    }
    if (args.newMessage !== undefined && args.newMessage !== null) {
      this.newMessage = args.newMessage;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.commentId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_updateComment_args');
  if (this.commentId !== null && this.commentId !== undefined) {
    output.writeFieldBegin('commentId', Thrift.Type.I64, 1);
    output.writeI64(this.commentId);
    output.writeFieldEnd();
  }
  if (this.newMessage !== null && this.newMessage !== undefined) {
    output.writeFieldBegin('newMessage', Thrift.Type.STRING, 2);
    output.writeString(this.newMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_updateComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_args = function(args) {
  this.commentId = null;
  if (args) {
    if (args.commentId !== undefined && args.commentId !== null) {
      this.commentId = args.commentId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.commentId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeComment_args');
  if (this.commentId !== null && this.commentId !== undefined) {
    output.writeFieldBegin('commentId', Thrift.Type.I64, 1);
    output.writeI64(this.commentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_args = function(args) {
  this.checkerId = null;
  if (args) {
    if (args.checkerId !== undefined && args.checkerId !== null) {
      this.checkerId = args.checkerId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.checkerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckerDoc_args');
  if (this.checkerId !== null && this.checkerId !== undefined) {
    output.writeFieldBegin('checkerId', Thrift.Type.STRING, 1);
    output.writeString(this.checkerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckerDoc_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_args = function(args) {
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getPackageVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getPackageVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_args = function(args) {
  this.runIds = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.runIds = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = input.readI64().value;
          this.runIds.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeRunResults_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter353 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter353))
      {
        iter353 = this.runIds[iter353];
        output.writeI64(iter353);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeRunResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size354 = 0;
        var _rtmp3358;
        this.runIds = [];
        var _etype357 = 0;
        _rtmp3358 = input.readListBegin();
        _etype357 = _rtmp3358.etype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var elem360 = null;
          elem360 = input.readI64().value;
          this.runIds.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeRunReports_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter361 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter361))
      {
        iter361 = this.runIds[iter361];
        output.writeI64(iter361);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeRunReports_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_args = function(args) {
  this.runId = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeRun_args');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 1);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeRun_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_args = function(args) {
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSuppressFile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSuppressFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.runIds = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = input.readI64().value;
          this.runIds.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSeverityCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter369 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter369))
      {
        iter369 = this.runIds[iter369];
        output.writeI64(iter369);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size370 = 0;
        var _rtmp3374;
        this.success = {};
        var _ktype371 = 0;
        var _vtype372 = 0;
        _rtmp3374 = input.readMapBegin();
        _ktype371 = _rtmp3374.ktype;
        _vtype372 = _rtmp3374.vtype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          if (_i375 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key376 = null;
          var val377 = null;
          key376 = input.readI32().value;
          val377 = input.readI64().value;
          this.success[key376] = val377;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSeverityCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter378 in this.success)
    {
      if (this.success.hasOwnProperty(kiter378))
      {
        var viter379 = this.success[kiter378];
        output.writeI32(kiter378);
        output.writeI64(viter379);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  this.limit = null;
  this.offset = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.runIds = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          elem386 = input.readI64().value;
          this.runIds.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckerMsgCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter387 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter387))
      {
        iter387 = this.runIds[iter387];
        output.writeI64(iter387);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 4);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 5);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size388 = 0;
        var _rtmp3392;
        this.success = {};
        var _ktype389 = 0;
        var _vtype390 = 0;
        _rtmp3392 = input.readMapBegin();
        _ktype389 = _rtmp3392.ktype;
        _vtype390 = _rtmp3392.vtype;
        _size388 = _rtmp3392.size;
        for (var _i393 = 0; _i393 < _size388; ++_i393)
        {
          if (_i393 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key394 = null;
          var val395 = null;
          key394 = input.readString().value;
          val395 = input.readI64().value;
          this.success[key394] = val395;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckerMsgCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter396 in this.success)
    {
      if (this.success.hasOwnProperty(kiter396))
      {
        var viter397 = this.success[kiter396];
        output.writeString(kiter396);
        output.writeI64(viter397);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.runIds = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = input.readI64().value;
          this.runIds.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getReviewStatusCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter405 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter405))
      {
        iter405 = this.runIds[iter405];
        output.writeI64(iter405);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size406 = 0;
        var _rtmp3410;
        this.success = {};
        var _ktype407 = 0;
        var _vtype408 = 0;
        _rtmp3410 = input.readMapBegin();
        _ktype407 = _rtmp3410.ktype;
        _vtype408 = _rtmp3410.vtype;
        _size406 = _rtmp3410.size;
        for (var _i411 = 0; _i411 < _size406; ++_i411)
        {
          if (_i411 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key412 = null;
          var val413 = null;
          key412 = input.readI32().value;
          val413 = input.readI64().value;
          this.success[key412] = val413;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getReviewStatusCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter414 in this.success)
    {
      if (this.success.hasOwnProperty(kiter414))
      {
        var viter415 = this.success[kiter414];
        output.writeI32(kiter414);
        output.writeI64(viter415);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size416 = 0;
        var _rtmp3420;
        this.runIds = [];
        var _etype419 = 0;
        _rtmp3420 = input.readListBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = input.readI64().value;
          this.runIds.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getDetectionStatusCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter423 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter423))
      {
        iter423 = this.runIds[iter423];
        output.writeI64(iter423);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size424 = 0;
        var _rtmp3428;
        this.success = {};
        var _ktype425 = 0;
        var _vtype426 = 0;
        _rtmp3428 = input.readMapBegin();
        _ktype425 = _rtmp3428.ktype;
        _vtype426 = _rtmp3428.vtype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          if (_i429 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key430 = null;
          var val431 = null;
          key430 = input.readI32().value;
          val431 = input.readI64().value;
          this.success[key430] = val431;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getDetectionStatusCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter432 in this.success)
    {
      if (this.success.hasOwnProperty(kiter432))
      {
        var viter433 = this.success[kiter432];
        output.writeI32(kiter432);
        output.writeI64(viter433);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  this.limit = null;
  this.offset = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size434 = 0;
        var _rtmp3438;
        this.runIds = [];
        var _etype437 = 0;
        _rtmp3438 = input.readListBegin();
        _etype437 = _rtmp3438.etype;
        _size434 = _rtmp3438.size;
        for (var _i439 = 0; _i439 < _size434; ++_i439)
        {
          var elem440 = null;
          elem440 = input.readI64().value;
          this.runIds.push(elem440);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getFileCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter441 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter441))
      {
        iter441 = this.runIds[iter441];
        output.writeI64(iter441);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 4);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 5);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size442 = 0;
        var _rtmp3446;
        this.success = {};
        var _ktype443 = 0;
        var _vtype444 = 0;
        _rtmp3446 = input.readMapBegin();
        _ktype443 = _rtmp3446.ktype;
        _vtype444 = _rtmp3446.vtype;
        _size442 = _rtmp3446.size;
        for (var _i447 = 0; _i447 < _size442; ++_i447)
        {
          if (_i447 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key448 = null;
          var val449 = null;
          key448 = input.readString().value;
          val449 = input.readI64().value;
          this.success[key448] = val449;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getFileCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter450 in this.success)
    {
      if (this.success.hasOwnProperty(kiter450))
      {
        var viter451 = this.success[kiter450];
        output.writeString(kiter450);
        output.writeI64(viter451);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  this.limit = null;
  this.offset = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.runIds = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = input.readI64().value;
          this.runIds.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckerCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter459 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter459))
      {
        iter459 = this.runIds[iter459];
        output.writeI64(iter459);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 4);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 5);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.CheckerCount]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.success = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = new codeCheckerDBAccess_v6.CheckerCount();
          elem466.read(input);
          this.success.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getCheckerCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter467 in this.success)
    {
      if (this.success.hasOwnProperty(iter467))
      {
        iter467 = this.success[iter467];
        iter467.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_args = function(args) {
  this.runIds = null;
  this.reportFilter = null;
  this.cmpData = null;
  if (args) {
    if (args.runIds !== undefined && args.runIds !== null) {
      this.runIds = Thrift.copyList(args.runIds, [null]);
    }
    if (args.reportFilter !== undefined && args.reportFilter !== null) {
      this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter(args.reportFilter);
    }
    if (args.cmpData !== undefined && args.cmpData !== null) {
      this.cmpData = new codeCheckerDBAccess_v6.CompareData(args.cmpData);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size468 = 0;
        var _rtmp3472;
        this.runIds = [];
        var _etype471 = 0;
        _rtmp3472 = input.readListBegin();
        _etype471 = _rtmp3472.etype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          var elem474 = null;
          elem474 = input.readI64().value;
          this.runIds.push(elem474);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportFilter = new codeCheckerDBAccess_v6.ReportFilter();
        this.reportFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cmpData = new codeCheckerDBAccess_v6.CompareData();
        this.cmpData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunHistoryTagCounts_args');
  if (this.runIds !== null && this.runIds !== undefined) {
    output.writeFieldBegin('runIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.runIds.length);
    for (var iter475 in this.runIds)
    {
      if (this.runIds.hasOwnProperty(iter475))
      {
        iter475 = this.runIds[iter475];
        output.writeI64(iter475);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportFilter !== null && this.reportFilter !== undefined) {
    output.writeFieldBegin('reportFilter', Thrift.Type.STRUCT, 2);
    this.reportFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.cmpData !== null && this.cmpData !== undefined) {
    output.writeFieldBegin('cmpData', Thrift.Type.STRUCT, 3);
    this.cmpData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.RunTagCount]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.success = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = new codeCheckerDBAccess_v6.RunTagCount();
          elem482.read(input);
          this.success.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getRunHistoryTagCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter483 in this.success)
    {
      if (this.success.hasOwnProperty(iter483))
      {
        iter483 = this.success[iter483];
        iter483.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_args = function(args) {
  this.name = null;
  this.value = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_addSourceComponent_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_addSourceComponent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_args = function(args) {
  this.sourceComponentFilter = null;
  if (args) {
    if (args.sourceComponentFilter !== undefined && args.sourceComponentFilter !== null) {
      this.sourceComponentFilter = Thrift.copyList(args.sourceComponentFilter, [null]);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.sourceComponentFilter = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = input.readString().value;
          this.sourceComponentFilter.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSourceComponents_args');
  if (this.sourceComponentFilter !== null && this.sourceComponentFilter !== undefined) {
    output.writeFieldBegin('sourceComponentFilter', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.sourceComponentFilter.length);
    for (var iter491 in this.sourceComponentFilter)
    {
      if (this.sourceComponentFilter.hasOwnProperty(iter491))
      {
        iter491 = this.sourceComponentFilter[iter491];
        output.writeString(iter491);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerDBAccess_v6.SourceComponentData]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.success = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = new codeCheckerDBAccess_v6.SourceComponentData();
          elem498.read(input);
          this.success.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getSourceComponents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter499 in this.success)
    {
      if (this.success.hasOwnProperty(iter499))
      {
        iter499 = this.success[iter499];
        iter499.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeSourceComponent_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_removeSourceComponent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_args = function(args) {
  this.fileHashes = null;
  if (args) {
    if (args.fileHashes !== undefined && args.fileHashes !== null) {
      this.fileHashes = Thrift.copyList(args.fileHashes, [null]);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.fileHashes = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = input.readString().value;
          this.fileHashes.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getMissingContentHashes_args');
  if (this.fileHashes !== null && this.fileHashes !== undefined) {
    output.writeFieldBegin('fileHashes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.fileHashes.length);
    for (var iter507 in this.fileHashes)
    {
      if (this.fileHashes.hasOwnProperty(iter507))
      {
        iter507 = this.fileHashes[iter507];
        output.writeString(iter507);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.success = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = input.readString().value;
          this.success.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getMissingContentHashes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter515 in this.success)
    {
      if (this.success.hasOwnProperty(iter515))
      {
        iter515 = this.success[iter515];
        output.writeString(iter515);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_args = function(args) {
  this.runName = null;
  this.tag = null;
  this.version = null;
  this.zipfile = null;
  this.force = null;
  this.trimPathPrefixes = null;
  if (args) {
    if (args.runName !== undefined && args.runName !== null) {
      this.runName = args.runName;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.zipfile !== undefined && args.zipfile !== null) {
      this.zipfile = args.zipfile;
    }
    if (args.force !== undefined && args.force !== null) {
      this.force = args.force;
    }
    if (args.trimPathPrefixes !== undefined && args.trimPathPrefixes !== null) {
      this.trimPathPrefixes = Thrift.copyList(args.trimPathPrefixes, [null]);
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.runName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.zipfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size516 = 0;
        var _rtmp3520;
        this.trimPathPrefixes = [];
        var _etype519 = 0;
        _rtmp3520 = input.readListBegin();
        _etype519 = _rtmp3520.etype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          var elem522 = null;
          elem522 = input.readString().value;
          this.trimPathPrefixes.push(elem522);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_massStoreRun_args');
  if (this.runName !== null && this.runName !== undefined) {
    output.writeFieldBegin('runName', Thrift.Type.STRING, 1);
    output.writeString(this.runName);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.zipfile !== null && this.zipfile !== undefined) {
    output.writeFieldBegin('zipfile', Thrift.Type.STRING, 4);
    output.writeString(this.zipfile);
    output.writeFieldEnd();
  }
  if (this.force !== null && this.force !== undefined) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 5);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  if (this.trimPathPrefixes !== null && this.trimPathPrefixes !== undefined) {
    output.writeFieldBegin('trimPathPrefixes', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.trimPathPrefixes.length);
    for (var iter523 in this.trimPathPrefixes)
    {
      if (this.trimPathPrefixes.hasOwnProperty(iter523))
      {
        iter523 = this.trimPathPrefixes[iter523];
        output.writeString(iter523);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_massStoreRun_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_args = function(args) {
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_allowsStoringAnalysisStatistics_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_allowsStoringAnalysisStatistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_args = function(args) {
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getAnalysisStatisticsLimits_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size524 = 0;
        var _rtmp3528;
        this.success = {};
        var _ktype525 = 0;
        var _vtype526 = 0;
        _rtmp3528 = input.readMapBegin();
        _ktype525 = _rtmp3528.ktype;
        _vtype526 = _rtmp3528.vtype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          if (_i529 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key530 = null;
          var val531 = null;
          key530 = input.readI32().value;
          val531 = input.readI64().value;
          this.success[key530] = val531;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getAnalysisStatisticsLimits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter532 in this.success)
    {
      if (this.success.hasOwnProperty(kiter532))
      {
        var viter533 = this.success[kiter532];
        output.writeI32(kiter532);
        output.writeI64(viter533);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_args = function(args) {
  this.runName = null;
  this.zipfile = null;
  if (args) {
    if (args.runName !== undefined && args.runName !== null) {
      this.runName = args.runName;
    }
    if (args.zipfile !== undefined && args.zipfile !== null) {
      this.zipfile = args.zipfile;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.runName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.zipfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_storeAnalysisStatistics_args');
  if (this.runName !== null && this.runName !== undefined) {
    output.writeFieldBegin('runName', Thrift.Type.STRING, 1);
    output.writeString(this.runName);
    output.writeFieldEnd();
  }
  if (this.zipfile !== null && this.zipfile !== undefined) {
    output.writeFieldBegin('zipfile', Thrift.Type.STRING, 2);
    output.writeString(this.zipfile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_storeAnalysisStatistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_args = function(args) {
  this.runId = null;
  this.runHistoryId = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
    if (args.runHistoryId !== undefined && args.runHistoryId !== null) {
      this.runHistoryId = args.runHistoryId;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_args.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.runId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.runHistoryId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getAnalysisStatistics_args');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.I64, 1);
    output.writeI64(this.runId);
    output.writeFieldEnd();
  }
  if (this.runHistoryId !== null && this.runHistoryId !== undefined) {
    output.writeFieldBegin('runHistoryId', Thrift.Type.I64, 2);
    output.writeI64(this.runHistoryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [codeCheckerDBAccess_v6.AnalyzerStatistics]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_result.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size534 = 0;
        var _rtmp3538;
        this.success = {};
        var _ktype535 = 0;
        var _vtype536 = 0;
        _rtmp3538 = input.readMapBegin();
        _ktype535 = _rtmp3538.ktype;
        _vtype536 = _rtmp3538.vtype;
        _size534 = _rtmp3538.size;
        for (var _i539 = 0; _i539 < _size534; ++_i539)
        {
          if (_i539 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key540 = null;
          var val541 = null;
          key540 = input.readString().value;
          val541 = new codeCheckerDBAccess_v6.AnalyzerStatistics();
          val541.read(input);
          this.success[key540] = val541;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerDBAccess_getAnalysisStatistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter542 in this.success)
    {
      if (this.success.hasOwnProperty(kiter542))
      {
        var viter543 = this.success[kiter542];
        output.writeString(kiter542);
        viter543.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype = {};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunData = function(runFilter, limit, offset, callback) {
  if (callback === undefined) {
    this.send_getRunData(runFilter, limit, offset);
    return this.recv_getRunData();
  } else {
    var postData = this.send_getRunData(runFilter, limit, offset, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunData);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunData = function(runFilter, limit, offset, callback) {
  this.output.writeMessageBegin('getRunData', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runFilter: runFilter,
    limit: limit,
    offset: offset
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunData failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunCount = function(runFilter, callback) {
  if (callback === undefined) {
    this.send_getRunCount(runFilter);
    return this.recv_getRunCount();
  } else {
    var postData = this.send_getRunCount(runFilter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunCount);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunCount = function(runFilter, callback) {
  this.output.writeMessageBegin('getRunCount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runFilter: runFilter
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunCount failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getCheckCommand = function(runHistoryId, runId, callback) {
  if (callback === undefined) {
    this.send_getCheckCommand(runHistoryId, runId);
    return this.recv_getCheckCommand();
  } else {
    var postData = this.send_getCheckCommand(runHistoryId, runId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCheckCommand);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getCheckCommand = function(runHistoryId, runId, callback) {
  this.output.writeMessageBegin('getCheckCommand', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runHistoryId: runHistoryId,
    runId: runId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getCheckCommand = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckCommand_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCheckCommand failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunHistory = function(runIds, limit, offset, runHistoryFilter, callback) {
  if (callback === undefined) {
    this.send_getRunHistory(runIds, limit, offset, runHistoryFilter);
    return this.recv_getRunHistory();
  } else {
    var postData = this.send_getRunHistory(runIds, limit, offset, runHistoryFilter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunHistory);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunHistory = function(runIds, limit, offset, runHistoryFilter, callback) {
  this.output.writeMessageBegin('getRunHistory', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    limit: limit,
    offset: offset,
    runHistoryFilter: runHistoryFilter
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunHistory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunHistory failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunHistoryCount = function(runIds, runHistoryFilter, callback) {
  if (callback === undefined) {
    this.send_getRunHistoryCount(runIds, runHistoryFilter);
    return this.recv_getRunHistoryCount();
  } else {
    var postData = this.send_getRunHistoryCount(runIds, runHistoryFilter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunHistoryCount);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunHistoryCount = function(runIds, runHistoryFilter, callback) {
  this.output.writeMessageBegin('getRunHistoryCount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    runHistoryFilter: runHistoryFilter
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunHistoryCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunHistoryCount failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getDiffResultsHash = function(runIds, reportHashes, diffType, skipDetectionStatuses, callback) {
  if (callback === undefined) {
    this.send_getDiffResultsHash(runIds, reportHashes, diffType, skipDetectionStatuses);
    return this.recv_getDiffResultsHash();
  } else {
    var postData = this.send_getDiffResultsHash(runIds, reportHashes, diffType, skipDetectionStatuses, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDiffResultsHash);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getDiffResultsHash = function(runIds, reportHashes, diffType, skipDetectionStatuses, callback) {
  this.output.writeMessageBegin('getDiffResultsHash', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportHashes: reportHashes,
    diffType: diffType,
    skipDetectionStatuses: skipDetectionStatuses
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getDiffResultsHash = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getDiffResultsHash_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDiffResultsHash failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getReport = function(reportId, callback) {
  if (callback === undefined) {
    this.send_getReport(reportId);
    return this.recv_getReport();
  } else {
    var postData = this.send_getReport(reportId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getReport);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getReport = function(reportId, callback) {
  this.output.writeMessageBegin('getReport', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reportId: reportId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getReport = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getReport_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getReport failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunResults = function(runIds, limit, offset, sortType, reportFilter, cmpData, getDetails, callback) {
  if (callback === undefined) {
    this.send_getRunResults(runIds, limit, offset, sortType, reportFilter, cmpData, getDetails);
    return this.recv_getRunResults();
  } else {
    var postData = this.send_getRunResults(runIds, limit, offset, sortType, reportFilter, cmpData, getDetails, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunResults);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunResults = function(runIds, limit, offset, sortType, reportFilter, cmpData, getDetails, callback) {
  this.output.writeMessageBegin('getRunResults', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    limit: limit,
    offset: offset,
    sortType: sortType,
    reportFilter: reportFilter,
    cmpData: cmpData,
    getDetails: getDetails
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunResults = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunResults failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunReportCounts = function(runIds, reportFilter, limit, offset, callback) {
  if (callback === undefined) {
    this.send_getRunReportCounts(runIds, reportFilter, limit, offset);
    return this.recv_getRunReportCounts();
  } else {
    var postData = this.send_getRunReportCounts(runIds, reportFilter, limit, offset, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunReportCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunReportCounts = function(runIds, reportFilter, limit, offset, callback) {
  this.output.writeMessageBegin('getRunReportCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    limit: limit,
    offset: offset
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunReportCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunReportCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunReportCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunResultCount = function(runIds, reportFilter, cmpData, callback) {
  if (callback === undefined) {
    this.send_getRunResultCount(runIds, reportFilter, cmpData);
    return this.recv_getRunResultCount();
  } else {
    var postData = this.send_getRunResultCount(runIds, reportFilter, cmpData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunResultCount);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunResultCount = function(runIds, reportFilter, cmpData, callback) {
  this.output.writeMessageBegin('getRunResultCount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunResultCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunResultCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunResultCount failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getReportDetails = function(reportId, callback) {
  if (callback === undefined) {
    this.send_getReportDetails(reportId);
    return this.recv_getReportDetails();
  } else {
    var postData = this.send_getReportDetails(reportId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getReportDetails);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getReportDetails = function(reportId, callback) {
  this.output.writeMessageBegin('getReportDetails', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reportId: reportId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getReportDetails = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getReportDetails_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getReportDetails failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getSourceFileData = function(fileId, fileContent, encoding, callback) {
  if (callback === undefined) {
    this.send_getSourceFileData(fileId, fileContent, encoding);
    return this.recv_getSourceFileData();
  } else {
    var postData = this.send_getSourceFileData(fileId, fileContent, encoding, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSourceFileData);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getSourceFileData = function(fileId, fileContent, encoding, callback) {
  this.output.writeMessageBegin('getSourceFileData', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fileId: fileId,
    fileContent: fileContent,
    encoding: encoding
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getSourceFileData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceFileData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSourceFileData failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getLinesInSourceFileContents = function(linesInFilesRequested, encoding, callback) {
  if (callback === undefined) {
    this.send_getLinesInSourceFileContents(linesInFilesRequested, encoding);
    return this.recv_getLinesInSourceFileContents();
  } else {
    var postData = this.send_getLinesInSourceFileContents(linesInFilesRequested, encoding, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLinesInSourceFileContents);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getLinesInSourceFileContents = function(linesInFilesRequested, encoding, callback) {
  this.output.writeMessageBegin('getLinesInSourceFileContents', Thrift.MessageType.CALL, this.seqid);
  var params = {
    linesInFilesRequested: linesInFilesRequested,
    encoding: encoding
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getLinesInSourceFileContents = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getLinesInSourceFileContents_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLinesInSourceFileContents failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.isReviewStatusChangeDisabled = function(callback) {
  if (callback === undefined) {
    this.send_isReviewStatusChangeDisabled();
    return this.recv_isReviewStatusChangeDisabled();
  } else {
    var postData = this.send_isReviewStatusChangeDisabled(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isReviewStatusChangeDisabled);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_isReviewStatusChangeDisabled = function(callback) {
  this.output.writeMessageBegin('isReviewStatusChangeDisabled', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_isReviewStatusChangeDisabled = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_isReviewStatusChangeDisabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isReviewStatusChangeDisabled failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.changeReviewStatus = function(reportId, status, message, callback) {
  if (callback === undefined) {
    this.send_changeReviewStatus(reportId, status, message);
    return this.recv_changeReviewStatus();
  } else {
    var postData = this.send_changeReviewStatus(reportId, status, message, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeReviewStatus);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_changeReviewStatus = function(reportId, status, message, callback) {
  this.output.writeMessageBegin('changeReviewStatus', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reportId: reportId,
    status: status,
    message: message
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_changeReviewStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_changeReviewStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeReviewStatus failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getComments = function(reportId, callback) {
  if (callback === undefined) {
    this.send_getComments(reportId);
    return this.recv_getComments();
  } else {
    var postData = this.send_getComments(reportId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getComments);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getComments = function(reportId, callback) {
  this.output.writeMessageBegin('getComments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reportId: reportId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getComments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getComments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getComments failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getCommentCount = function(reportId, callback) {
  if (callback === undefined) {
    this.send_getCommentCount(reportId);
    return this.recv_getCommentCount();
  } else {
    var postData = this.send_getCommentCount(reportId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCommentCount);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getCommentCount = function(reportId, callback) {
  this.output.writeMessageBegin('getCommentCount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reportId: reportId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getCommentCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCommentCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCommentCount failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.addComment = function(reportId, comment, callback) {
  if (callback === undefined) {
    this.send_addComment(reportId, comment);
    return this.recv_addComment();
  } else {
    var postData = this.send_addComment(reportId, comment, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addComment);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_addComment = function(reportId, comment, callback) {
  this.output.writeMessageBegin('addComment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    reportId: reportId,
    comment: comment
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_addComment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_addComment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addComment failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.updateComment = function(commentId, newMessage, callback) {
  if (callback === undefined) {
    this.send_updateComment(commentId, newMessage);
    return this.recv_updateComment();
  } else {
    var postData = this.send_updateComment(commentId, newMessage, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateComment);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_updateComment = function(commentId, newMessage, callback) {
  this.output.writeMessageBegin('updateComment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    commentId: commentId,
    newMessage: newMessage
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_updateComment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_updateComment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateComment failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.removeComment = function(commentId, callback) {
  if (callback === undefined) {
    this.send_removeComment(commentId);
    return this.recv_removeComment();
  } else {
    var postData = this.send_removeComment(commentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeComment);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_removeComment = function(commentId, callback) {
  this.output.writeMessageBegin('removeComment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    commentId: commentId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_removeComment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeComment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeComment failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getCheckerDoc = function(checkerId, callback) {
  if (callback === undefined) {
    this.send_getCheckerDoc(checkerId);
    return this.recv_getCheckerDoc();
  } else {
    var postData = this.send_getCheckerDoc(checkerId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCheckerDoc);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getCheckerDoc = function(checkerId, callback) {
  this.output.writeMessageBegin('getCheckerDoc', Thrift.MessageType.CALL, this.seqid);
  var params = {
    checkerId: checkerId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getCheckerDoc = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerDoc_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCheckerDoc failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getPackageVersion = function(callback) {
  if (callback === undefined) {
    this.send_getPackageVersion();
    return this.recv_getPackageVersion();
  } else {
    var postData = this.send_getPackageVersion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPackageVersion);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getPackageVersion = function(callback) {
  this.output.writeMessageBegin('getPackageVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getPackageVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getPackageVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPackageVersion failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.removeRunResults = function(runIds, callback) {
  if (callback === undefined) {
    this.send_removeRunResults(runIds);
    return this.recv_removeRunResults();
  } else {
    var postData = this.send_removeRunResults(runIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeRunResults);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_removeRunResults = function(runIds, callback) {
  this.output.writeMessageBegin('removeRunResults', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_removeRunResults = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'removeRunResults failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.removeRunReports = function(runIds, reportFilter, cmpData, callback) {
  if (callback === undefined) {
    this.send_removeRunReports(runIds, reportFilter, cmpData);
    return this.recv_removeRunReports();
  } else {
    var postData = this.send_removeRunReports(runIds, reportFilter, cmpData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeRunReports);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_removeRunReports = function(runIds, reportFilter, cmpData, callback) {
  this.output.writeMessageBegin('removeRunReports', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_removeRunReports = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRunReports_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeRunReports failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.removeRun = function(runId, callback) {
  if (callback === undefined) {
    this.send_removeRun(runId);
    return this.recv_removeRun();
  } else {
    var postData = this.send_removeRun(runId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeRun);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_removeRun = function(runId, callback) {
  this.output.writeMessageBegin('removeRun', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runId: runId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_removeRun = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeRun_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeRun failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getSuppressFile = function(callback) {
  if (callback === undefined) {
    this.send_getSuppressFile();
    return this.recv_getSuppressFile();
  } else {
    var postData = this.send_getSuppressFile(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSuppressFile);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getSuppressFile = function(callback) {
  this.output.writeMessageBegin('getSuppressFile', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getSuppressFile = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSuppressFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSuppressFile failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getSeverityCounts = function(runIds, reportFilter, cmpData, callback) {
  if (callback === undefined) {
    this.send_getSeverityCounts(runIds, reportFilter, cmpData);
    return this.recv_getSeverityCounts();
  } else {
    var postData = this.send_getSeverityCounts(runIds, reportFilter, cmpData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSeverityCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getSeverityCounts = function(runIds, reportFilter, cmpData, callback) {
  this.output.writeMessageBegin('getSeverityCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getSeverityCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSeverityCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSeverityCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getCheckerMsgCounts = function(runIds, reportFilter, cmpData, limit, offset, callback) {
  if (callback === undefined) {
    this.send_getCheckerMsgCounts(runIds, reportFilter, cmpData, limit, offset);
    return this.recv_getCheckerMsgCounts();
  } else {
    var postData = this.send_getCheckerMsgCounts(runIds, reportFilter, cmpData, limit, offset, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCheckerMsgCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getCheckerMsgCounts = function(runIds, reportFilter, cmpData, limit, offset, callback) {
  this.output.writeMessageBegin('getCheckerMsgCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData,
    limit: limit,
    offset: offset
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getCheckerMsgCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerMsgCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCheckerMsgCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getReviewStatusCounts = function(runIds, reportFilter, cmpData, callback) {
  if (callback === undefined) {
    this.send_getReviewStatusCounts(runIds, reportFilter, cmpData);
    return this.recv_getReviewStatusCounts();
  } else {
    var postData = this.send_getReviewStatusCounts(runIds, reportFilter, cmpData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getReviewStatusCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getReviewStatusCounts = function(runIds, reportFilter, cmpData, callback) {
  this.output.writeMessageBegin('getReviewStatusCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getReviewStatusCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getReviewStatusCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getReviewStatusCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getDetectionStatusCounts = function(runIds, reportFilter, cmpData, callback) {
  if (callback === undefined) {
    this.send_getDetectionStatusCounts(runIds, reportFilter, cmpData);
    return this.recv_getDetectionStatusCounts();
  } else {
    var postData = this.send_getDetectionStatusCounts(runIds, reportFilter, cmpData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDetectionStatusCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getDetectionStatusCounts = function(runIds, reportFilter, cmpData, callback) {
  this.output.writeMessageBegin('getDetectionStatusCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getDetectionStatusCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getDetectionStatusCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDetectionStatusCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getFileCounts = function(runIds, reportFilter, cmpData, limit, offset, callback) {
  if (callback === undefined) {
    this.send_getFileCounts(runIds, reportFilter, cmpData, limit, offset);
    return this.recv_getFileCounts();
  } else {
    var postData = this.send_getFileCounts(runIds, reportFilter, cmpData, limit, offset, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFileCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getFileCounts = function(runIds, reportFilter, cmpData, limit, offset, callback) {
  this.output.writeMessageBegin('getFileCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData,
    limit: limit,
    offset: offset
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getFileCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getFileCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFileCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getCheckerCounts = function(runIds, reportFilter, cmpData, limit, offset, callback) {
  if (callback === undefined) {
    this.send_getCheckerCounts(runIds, reportFilter, cmpData, limit, offset);
    return this.recv_getCheckerCounts();
  } else {
    var postData = this.send_getCheckerCounts(runIds, reportFilter, cmpData, limit, offset, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCheckerCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getCheckerCounts = function(runIds, reportFilter, cmpData, limit, offset, callback) {
  this.output.writeMessageBegin('getCheckerCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData,
    limit: limit,
    offset: offset
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getCheckerCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getCheckerCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCheckerCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getRunHistoryTagCounts = function(runIds, reportFilter, cmpData, callback) {
  if (callback === undefined) {
    this.send_getRunHistoryTagCounts(runIds, reportFilter, cmpData);
    return this.recv_getRunHistoryTagCounts();
  } else {
    var postData = this.send_getRunHistoryTagCounts(runIds, reportFilter, cmpData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRunHistoryTagCounts);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getRunHistoryTagCounts = function(runIds, reportFilter, cmpData, callback) {
  this.output.writeMessageBegin('getRunHistoryTagCounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runIds: runIds,
    reportFilter: reportFilter,
    cmpData: cmpData
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getRunHistoryTagCounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getRunHistoryTagCounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRunHistoryTagCounts failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.addSourceComponent = function(name, value, description, callback) {
  if (callback === undefined) {
    this.send_addSourceComponent(name, value, description);
    return this.recv_addSourceComponent();
  } else {
    var postData = this.send_addSourceComponent(name, value, description, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSourceComponent);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_addSourceComponent = function(name, value, description, callback) {
  this.output.writeMessageBegin('addSourceComponent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    name: name,
    value: value,
    description: description
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_addSourceComponent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_addSourceComponent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addSourceComponent failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getSourceComponents = function(sourceComponentFilter, callback) {
  if (callback === undefined) {
    this.send_getSourceComponents(sourceComponentFilter);
    return this.recv_getSourceComponents();
  } else {
    var postData = this.send_getSourceComponents(sourceComponentFilter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSourceComponents);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getSourceComponents = function(sourceComponentFilter, callback) {
  this.output.writeMessageBegin('getSourceComponents', Thrift.MessageType.CALL, this.seqid);
  var params = {
    sourceComponentFilter: sourceComponentFilter
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getSourceComponents = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getSourceComponents_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSourceComponents failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.removeSourceComponent = function(name, callback) {
  if (callback === undefined) {
    this.send_removeSourceComponent(name);
    return this.recv_removeSourceComponent();
  } else {
    var postData = this.send_removeSourceComponent(name, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeSourceComponent);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_removeSourceComponent = function(name, callback) {
  this.output.writeMessageBegin('removeSourceComponent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    name: name
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_removeSourceComponent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_removeSourceComponent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSourceComponent failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getMissingContentHashes = function(fileHashes, callback) {
  if (callback === undefined) {
    this.send_getMissingContentHashes(fileHashes);
    return this.recv_getMissingContentHashes();
  } else {
    var postData = this.send_getMissingContentHashes(fileHashes, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMissingContentHashes);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getMissingContentHashes = function(fileHashes, callback) {
  this.output.writeMessageBegin('getMissingContentHashes', Thrift.MessageType.CALL, this.seqid);
  var params = {
    fileHashes: fileHashes
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getMissingContentHashes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getMissingContentHashes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMissingContentHashes failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.massStoreRun = function(runName, tag, version, zipfile, force, trimPathPrefixes, callback) {
  if (callback === undefined) {
    this.send_massStoreRun(runName, tag, version, zipfile, force, trimPathPrefixes);
    return this.recv_massStoreRun();
  } else {
    var postData = this.send_massStoreRun(runName, tag, version, zipfile, force, trimPathPrefixes, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_massStoreRun);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_massStoreRun = function(runName, tag, version, zipfile, force, trimPathPrefixes, callback) {
  this.output.writeMessageBegin('massStoreRun', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runName: runName,
    tag: tag,
    version: version,
    zipfile: zipfile,
    force: force,
    trimPathPrefixes: trimPathPrefixes
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_massStoreRun = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_massStoreRun_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'massStoreRun failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.allowsStoringAnalysisStatistics = function(callback) {
  if (callback === undefined) {
    this.send_allowsStoringAnalysisStatistics();
    return this.recv_allowsStoringAnalysisStatistics();
  } else {
    var postData = this.send_allowsStoringAnalysisStatistics(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_allowsStoringAnalysisStatistics);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_allowsStoringAnalysisStatistics = function(callback) {
  this.output.writeMessageBegin('allowsStoringAnalysisStatistics', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_allowsStoringAnalysisStatistics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_allowsStoringAnalysisStatistics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'allowsStoringAnalysisStatistics failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getAnalysisStatisticsLimits = function(callback) {
  if (callback === undefined) {
    this.send_getAnalysisStatisticsLimits();
    return this.recv_getAnalysisStatisticsLimits();
  } else {
    var postData = this.send_getAnalysisStatisticsLimits(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAnalysisStatisticsLimits);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getAnalysisStatisticsLimits = function(callback) {
  this.output.writeMessageBegin('getAnalysisStatisticsLimits', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getAnalysisStatisticsLimits = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatisticsLimits_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAnalysisStatisticsLimits failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.storeAnalysisStatistics = function(runName, zipfile, callback) {
  if (callback === undefined) {
    this.send_storeAnalysisStatistics(runName, zipfile);
    return this.recv_storeAnalysisStatistics();
  } else {
    var postData = this.send_storeAnalysisStatistics(runName, zipfile, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_storeAnalysisStatistics);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_storeAnalysisStatistics = function(runName, zipfile, callback) {
  this.output.writeMessageBegin('storeAnalysisStatistics', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runName: runName,
    zipfile: zipfile
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_storeAnalysisStatistics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_storeAnalysisStatistics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'storeAnalysisStatistics failed: unknown result';
};
codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.getAnalysisStatistics = function(runId, runHistoryId, callback) {
  if (callback === undefined) {
    this.send_getAnalysisStatistics(runId, runHistoryId);
    return this.recv_getAnalysisStatistics();
  } else {
    var postData = this.send_getAnalysisStatistics(runId, runHistoryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAnalysisStatistics);
  }
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.send_getAnalysisStatistics = function(runId, runHistoryId, callback) {
  this.output.writeMessageBegin('getAnalysisStatistics', Thrift.MessageType.CALL, this.seqid);
  var params = {
    runId: runId,
    runHistoryId: runHistoryId
  };
  var args = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerDBAccess_v6.codeCheckerDBAccessClient.prototype.recv_getAnalysisStatistics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerDBAccess_v6.codeCheckerDBAccess_getAnalysisStatistics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAnalysisStatistics failed: unknown result';
};
