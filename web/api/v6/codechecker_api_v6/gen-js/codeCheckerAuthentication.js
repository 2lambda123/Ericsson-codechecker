//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_args = function(args) {
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_checkAPIVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_result = function(args) {
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_checkAPIVersion_result');
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_args = function(args) {
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getAuthParameters_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerAuthentication_v6.HandshakeInformation(args.success);
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerAuthentication_v6.HandshakeInformation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getAuthParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_args = function(args) {
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getAcceptedAuthMethods_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getAcceptedAuthMethods_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_args = function(args) {
  this.authMethod = null;
  this.authString = null;
  if (args) {
    if (args.authMethod !== undefined && args.authMethod !== null) {
      this.authMethod = args.authMethod;
    }
    if (args.authString !== undefined && args.authString !== null) {
      this.authString = args.authString;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authMethod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_performLogin_args');
  if (this.authMethod !== null && this.authMethod !== undefined) {
    output.writeFieldBegin('authMethod', Thrift.Type.STRING, 1);
    output.writeString(this.authMethod);
    output.writeFieldEnd();
  }
  if (this.authString !== null && this.authString !== undefined) {
    output.writeFieldBegin('authString', Thrift.Type.STRING, 2);
    output.writeString(this.authString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_performLogin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_args = function(args) {
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_destroySession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_destroySession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_args = function(args) {
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getLoggedInUser_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getLoggedInUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_args = function(args) {
  this.scope = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scope = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getPermissions_args');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.STRING, 1);
    output.writeString(this.scope);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32().value;
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getPermissions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_args = function(args) {
  this.scope = null;
  this.extraParams = null;
  this.filter = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = args.extraParams;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new codeCheckerAuthentication_v6.PermissionFilter(args.filter);
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scope = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extraParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new codeCheckerAuthentication_v6.PermissionFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getPermissionsForUser_args');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.STRING, 1);
    output.writeString(this.scope);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.STRING, 2);
    output.writeString(this.extraParams);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32().value;
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getPermissionsForUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_args = function(args) {
  this.permission = null;
  this.extraParams = null;
  if (args) {
    if (args.permission !== undefined && args.permission !== null) {
      this.permission = args.permission;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = args.extraParams;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extraParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getAuthorisedNames_args');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.STRING, 2);
    output.writeString(this.extraParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerAuthentication_v6.AuthorisationList(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerAuthentication_v6.AuthorisationList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getAuthorisedNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_args = function(args) {
  this.permission = null;
  this.authName = null;
  this.isGroup = null;
  this.extraParams = null;
  if (args) {
    if (args.permission !== undefined && args.permission !== null) {
      this.permission = args.permission;
    }
    if (args.authName !== undefined && args.authName !== null) {
      this.authName = args.authName;
    }
    if (args.isGroup !== undefined && args.isGroup !== null) {
      this.isGroup = args.isGroup;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = args.extraParams;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isGroup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.extraParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_addPermission_args');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  if (this.authName !== null && this.authName !== undefined) {
    output.writeFieldBegin('authName', Thrift.Type.STRING, 2);
    output.writeString(this.authName);
    output.writeFieldEnd();
  }
  if (this.isGroup !== null && this.isGroup !== undefined) {
    output.writeFieldBegin('isGroup', Thrift.Type.BOOL, 3);
    output.writeBool(this.isGroup);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.STRING, 4);
    output.writeString(this.extraParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_addPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_args = function(args) {
  this.permission = null;
  this.authName = null;
  this.isGroup = null;
  this.extraParams = null;
  if (args) {
    if (args.permission !== undefined && args.permission !== null) {
      this.permission = args.permission;
    }
    if (args.authName !== undefined && args.authName !== null) {
      this.authName = args.authName;
    }
    if (args.isGroup !== undefined && args.isGroup !== null) {
      this.isGroup = args.isGroup;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = args.extraParams;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isGroup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.extraParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_removePermission_args');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  if (this.authName !== null && this.authName !== undefined) {
    output.writeFieldBegin('authName', Thrift.Type.STRING, 2);
    output.writeString(this.authName);
    output.writeFieldEnd();
  }
  if (this.isGroup !== null && this.isGroup !== undefined) {
    output.writeFieldBegin('isGroup', Thrift.Type.BOOL, 3);
    output.writeBool(this.isGroup);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.STRING, 4);
    output.writeString(this.extraParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_removePermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_args = function(args) {
  this.permission = null;
  this.extraParams = null;
  if (args) {
    if (args.permission !== undefined && args.permission !== null) {
      this.permission = args.permission;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = args.extraParams;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.permission = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extraParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_hasPermission_args');
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.I32, 1);
    output.writeI32(this.permission);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.STRING, 2);
    output.writeString(this.extraParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_hasPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_args = function(args) {
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getTokens_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerAuthentication_v6.SessionTokenData]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new codeCheckerAuthentication_v6.SessionTokenData();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_getTokens_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_args = function(args) {
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_newToken_args');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerAuthentication_v6.SessionTokenData(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerAuthentication_v6.SessionTokenData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_newToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_args.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_removeToken_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_result.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerAuthentication_removeToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype = {};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.checkAPIVersion = function(callback) {
  if (callback === undefined) {
    this.send_checkAPIVersion();
    this.recv_checkAPIVersion();
  } else {
    var postData = this.send_checkAPIVersion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_checkAPIVersion);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_checkAPIVersion = function(callback) {
  this.output.writeMessageBegin('checkAPIVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_checkAPIVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_checkAPIVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  return;
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getAuthParameters = function(callback) {
  if (callback === undefined) {
    this.send_getAuthParameters();
    return this.recv_getAuthParameters();
  } else {
    var postData = this.send_getAuthParameters(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAuthParameters);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getAuthParameters = function(callback) {
  this.output.writeMessageBegin('getAuthParameters', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getAuthParameters = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthParameters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAuthParameters failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getAcceptedAuthMethods = function(callback) {
  if (callback === undefined) {
    this.send_getAcceptedAuthMethods();
    return this.recv_getAcceptedAuthMethods();
  } else {
    var postData = this.send_getAcceptedAuthMethods(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAcceptedAuthMethods);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getAcceptedAuthMethods = function(callback) {
  this.output.writeMessageBegin('getAcceptedAuthMethods', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getAcceptedAuthMethods = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getAcceptedAuthMethods_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAcceptedAuthMethods failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.performLogin = function(authMethod, authString, callback) {
  if (callback === undefined) {
    this.send_performLogin(authMethod, authString);
    return this.recv_performLogin();
  } else {
    var postData = this.send_performLogin(authMethod, authString, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_performLogin);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_performLogin = function(authMethod, authString, callback) {
  this.output.writeMessageBegin('performLogin', Thrift.MessageType.CALL, this.seqid);
  var params = {
    authMethod: authMethod,
    authString: authString
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_performLogin = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_performLogin_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'performLogin failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.destroySession = function(callback) {
  if (callback === undefined) {
    this.send_destroySession();
    return this.recv_destroySession();
  } else {
    var postData = this.send_destroySession(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_destroySession);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_destroySession = function(callback) {
  this.output.writeMessageBegin('destroySession', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_destroySession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_destroySession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'destroySession failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getLoggedInUser = function(callback) {
  if (callback === undefined) {
    this.send_getLoggedInUser();
    return this.recv_getLoggedInUser();
  } else {
    var postData = this.send_getLoggedInUser(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLoggedInUser);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getLoggedInUser = function(callback) {
  this.output.writeMessageBegin('getLoggedInUser', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getLoggedInUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getLoggedInUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLoggedInUser failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getPermissions = function(scope, callback) {
  if (callback === undefined) {
    this.send_getPermissions(scope);
    return this.recv_getPermissions();
  } else {
    var postData = this.send_getPermissions(scope, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPermissions);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getPermissions = function(scope, callback) {
  this.output.writeMessageBegin('getPermissions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    scope: scope
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getPermissions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPermissions failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getPermissionsForUser = function(scope, extraParams, filter, callback) {
  if (callback === undefined) {
    this.send_getPermissionsForUser(scope, extraParams, filter);
    return this.recv_getPermissionsForUser();
  } else {
    var postData = this.send_getPermissionsForUser(scope, extraParams, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPermissionsForUser);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getPermissionsForUser = function(scope, extraParams, filter, callback) {
  this.output.writeMessageBegin('getPermissionsForUser', Thrift.MessageType.CALL, this.seqid);
  var params = {
    scope: scope,
    extraParams: extraParams,
    filter: filter
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getPermissionsForUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getPermissionsForUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPermissionsForUser failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getAuthorisedNames = function(permission, extraParams, callback) {
  if (callback === undefined) {
    this.send_getAuthorisedNames(permission, extraParams);
    return this.recv_getAuthorisedNames();
  } else {
    var postData = this.send_getAuthorisedNames(permission, extraParams, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAuthorisedNames);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getAuthorisedNames = function(permission, extraParams, callback) {
  this.output.writeMessageBegin('getAuthorisedNames', Thrift.MessageType.CALL, this.seqid);
  var params = {
    permission: permission,
    extraParams: extraParams
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getAuthorisedNames = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getAuthorisedNames_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAuthorisedNames failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.addPermission = function(permission, authName, isGroup, extraParams, callback) {
  if (callback === undefined) {
    this.send_addPermission(permission, authName, isGroup, extraParams);
    return this.recv_addPermission();
  } else {
    var postData = this.send_addPermission(permission, authName, isGroup, extraParams, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addPermission);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_addPermission = function(permission, authName, isGroup, extraParams, callback) {
  this.output.writeMessageBegin('addPermission', Thrift.MessageType.CALL, this.seqid);
  var params = {
    permission: permission,
    authName: authName,
    isGroup: isGroup,
    extraParams: extraParams
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_addPermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_addPermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addPermission failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.removePermission = function(permission, authName, isGroup, extraParams, callback) {
  if (callback === undefined) {
    this.send_removePermission(permission, authName, isGroup, extraParams);
    return this.recv_removePermission();
  } else {
    var postData = this.send_removePermission(permission, authName, isGroup, extraParams, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removePermission);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_removePermission = function(permission, authName, isGroup, extraParams, callback) {
  this.output.writeMessageBegin('removePermission', Thrift.MessageType.CALL, this.seqid);
  var params = {
    permission: permission,
    authName: authName,
    isGroup: isGroup,
    extraParams: extraParams
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_removePermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_removePermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removePermission failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.hasPermission = function(permission, extraParams, callback) {
  if (callback === undefined) {
    this.send_hasPermission(permission, extraParams);
    return this.recv_hasPermission();
  } else {
    var postData = this.send_hasPermission(permission, extraParams, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_hasPermission);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_hasPermission = function(permission, extraParams, callback) {
  this.output.writeMessageBegin('hasPermission', Thrift.MessageType.CALL, this.seqid);
  var params = {
    permission: permission,
    extraParams: extraParams
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_hasPermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_hasPermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'hasPermission failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.getTokens = function(callback) {
  if (callback === undefined) {
    this.send_getTokens();
    return this.recv_getTokens();
  } else {
    var postData = this.send_getTokens(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTokens);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_getTokens = function(callback) {
  this.output.writeMessageBegin('getTokens', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_getTokens = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_getTokens_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTokens failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.newToken = function(description, callback) {
  if (callback === undefined) {
    this.send_newToken(description);
    return this.recv_newToken();
  } else {
    var postData = this.send_newToken(description, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_newToken);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_newToken = function(description, callback) {
  this.output.writeMessageBegin('newToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    description: description
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_newToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_newToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'newToken failed: unknown result';
};
codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.removeToken = function(token, callback) {
  if (callback === undefined) {
    this.send_removeToken(token);
    return this.recv_removeToken();
  } else {
    var postData = this.send_removeToken(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeToken);
  }
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.send_removeToken = function(token, callback) {
  this.output.writeMessageBegin('removeToken', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerAuthentication_v6.codeCheckerAuthenticationClient.prototype.recv_removeToken = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerAuthentication_v6.codeCheckerAuthentication_removeToken_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeToken failed: unknown result';
};
