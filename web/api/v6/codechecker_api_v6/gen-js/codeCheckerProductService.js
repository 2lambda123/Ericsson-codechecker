//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_args = function(args) {
};
codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getPackageVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getPackageVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_args = function(args) {
};
codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_isAdministratorOfAnyProduct_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_isAdministratorOfAnyProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_args = function(args) {
  this.productEndpointFilter = null;
  this.productNameFilter = null;
  if (args) {
    if (args.productEndpointFilter !== undefined && args.productEndpointFilter !== null) {
      this.productEndpointFilter = args.productEndpointFilter;
    }
    if (args.productNameFilter !== undefined && args.productNameFilter !== null) {
      this.productNameFilter = args.productNameFilter;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productEndpointFilter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productNameFilter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getProducts_args');
  if (this.productEndpointFilter !== null && this.productEndpointFilter !== undefined) {
    output.writeFieldBegin('productEndpointFilter', Thrift.Type.STRING, 1);
    output.writeString(this.productEndpointFilter);
    output.writeFieldEnd();
  }
  if (this.productNameFilter !== null && this.productNameFilter !== undefined) {
    output.writeFieldBegin('productNameFilter', Thrift.Type.STRING, 2);
    output.writeString(this.productNameFilter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [codeCheckerProductManagement_v6.Product]);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new codeCheckerProductManagement_v6.Product();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getProducts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_args = function(args) {
};
codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getCurrentProduct_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerProductManagement_v6.Product(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerProductManagement_v6.Product();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getCurrentProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_args = function(args) {
  this.productId = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.productId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getProductConfiguration_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.I64, 1);
    output.writeI64(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new codeCheckerProductManagement_v6.ProductConfiguration(args.success);
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new codeCheckerProductManagement_v6.ProductConfiguration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_getProductConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_args = function(args) {
  this.product = null;
  if (args) {
    if (args.product !== undefined && args.product !== null) {
      this.product = new codeCheckerProductManagement_v6.ProductConfiguration(args.product);
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new codeCheckerProductManagement_v6.ProductConfiguration();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_addProduct_args');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 1);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_addProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_args = function(args) {
  this.productId = null;
  this.newConfiguration = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.newConfiguration !== undefined && args.newConfiguration !== null) {
      this.newConfiguration = new codeCheckerProductManagement_v6.ProductConfiguration(args.newConfiguration);
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.productId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newConfiguration = new codeCheckerProductManagement_v6.ProductConfiguration();
        this.newConfiguration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_editProduct_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.I64, 1);
    output.writeI64(this.productId);
    output.writeFieldEnd();
  }
  if (this.newConfiguration !== null && this.newConfiguration !== undefined) {
    output.writeFieldBegin('newConfiguration', Thrift.Type.STRUCT, 2);
    this.newConfiguration.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_editProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_args = function(args) {
  this.productId = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_args.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.productId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_args.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_removeProduct_args');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.I64, 1);
    output.writeI64(this.productId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_result = function(args) {
  this.success = null;
  this.requestError = null;
  if (args instanceof RequestFailed) {
    this.requestError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.requestError !== undefined && args.requestError !== null) {
      this.requestError = args.requestError;
    }
  }
};
codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_result.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestError = new RequestFailed();
        this.requestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_result.prototype.write = function(output) {
  output.writeStructBegin('codeCheckerProductService_removeProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.requestError !== null && this.requestError !== undefined) {
    output.writeFieldBegin('requestError', Thrift.Type.STRUCT, 1);
    this.requestError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype = {};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.getPackageVersion = function(callback) {
  if (callback === undefined) {
    this.send_getPackageVersion();
    return this.recv_getPackageVersion();
  } else {
    var postData = this.send_getPackageVersion(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPackageVersion);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_getPackageVersion = function(callback) {
  this.output.writeMessageBegin('getPackageVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_getPackageVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_getPackageVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPackageVersion failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.isAdministratorOfAnyProduct = function(callback) {
  if (callback === undefined) {
    this.send_isAdministratorOfAnyProduct();
    return this.recv_isAdministratorOfAnyProduct();
  } else {
    var postData = this.send_isAdministratorOfAnyProduct(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_isAdministratorOfAnyProduct);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_isAdministratorOfAnyProduct = function(callback) {
  this.output.writeMessageBegin('isAdministratorOfAnyProduct', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_isAdministratorOfAnyProduct = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_isAdministratorOfAnyProduct_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isAdministratorOfAnyProduct failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.getProducts = function(productEndpointFilter, productNameFilter, callback) {
  if (callback === undefined) {
    this.send_getProducts(productEndpointFilter, productNameFilter);
    return this.recv_getProducts();
  } else {
    var postData = this.send_getProducts(productEndpointFilter, productNameFilter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProducts);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_getProducts = function(productEndpointFilter, productNameFilter, callback) {
  this.output.writeMessageBegin('getProducts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    productEndpointFilter: productEndpointFilter,
    productNameFilter: productNameFilter
  };
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_getProducts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_getProducts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProducts failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.getCurrentProduct = function(callback) {
  if (callback === undefined) {
    this.send_getCurrentProduct();
    return this.recv_getCurrentProduct();
  } else {
    var postData = this.send_getCurrentProduct(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCurrentProduct);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_getCurrentProduct = function(callback) {
  this.output.writeMessageBegin('getCurrentProduct', Thrift.MessageType.CALL, this.seqid);
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_getCurrentProduct = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_getCurrentProduct_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCurrentProduct failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.getProductConfiguration = function(productId, callback) {
  if (callback === undefined) {
    this.send_getProductConfiguration(productId);
    return this.recv_getProductConfiguration();
  } else {
    var postData = this.send_getProductConfiguration(productId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProductConfiguration);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_getProductConfiguration = function(productId, callback) {
  this.output.writeMessageBegin('getProductConfiguration', Thrift.MessageType.CALL, this.seqid);
  var params = {
    productId: productId
  };
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_getProductConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_getProductConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProductConfiguration failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.addProduct = function(product, callback) {
  if (callback === undefined) {
    this.send_addProduct(product);
    return this.recv_addProduct();
  } else {
    var postData = this.send_addProduct(product, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addProduct);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_addProduct = function(product, callback) {
  this.output.writeMessageBegin('addProduct', Thrift.MessageType.CALL, this.seqid);
  var params = {
    product: product
  };
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_addProduct = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_addProduct_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addProduct failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.editProduct = function(productId, newConfiguration, callback) {
  if (callback === undefined) {
    this.send_editProduct(productId, newConfiguration);
    return this.recv_editProduct();
  } else {
    var postData = this.send_editProduct(productId, newConfiguration, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_editProduct);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_editProduct = function(productId, newConfiguration, callback) {
  this.output.writeMessageBegin('editProduct', Thrift.MessageType.CALL, this.seqid);
  var params = {
    productId: productId,
    newConfiguration: newConfiguration
  };
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_editProduct = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_editProduct_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'editProduct failed: unknown result';
};
codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.removeProduct = function(productId, callback) {
  if (callback === undefined) {
    this.send_removeProduct(productId);
    return this.recv_removeProduct();
  } else {
    var postData = this.send_removeProduct(productId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeProduct);
  }
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.send_removeProduct = function(productId, callback) {
  this.output.writeMessageBegin('removeProduct', Thrift.MessageType.CALL, this.seqid);
  var params = {
    productId: productId
  };
  var args = new codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

codeCheckerProductManagement_v6.codeCheckerProductServiceClient.prototype.recv_removeProduct = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new codeCheckerProductManagement_v6.codeCheckerProductService_removeProduct_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.requestError) {
    throw result.requestError;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeProduct failed: unknown result';
};
