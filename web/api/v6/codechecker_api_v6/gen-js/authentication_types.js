//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof codeCheckerAuthentication_v6 === 'undefined') {
  codeCheckerAuthentication_v6 = {};
}
codeCheckerAuthentication_v6.HandshakeInformation = function(args) {
  this.requiresAuthentication = null;
  this.sessionStillActive = null;
  if (args) {
    if (args.requiresAuthentication !== undefined && args.requiresAuthentication !== null) {
      this.requiresAuthentication = args.requiresAuthentication;
    }
    if (args.sessionStillActive !== undefined && args.sessionStillActive !== null) {
      this.sessionStillActive = args.sessionStillActive;
    }
  }
};
codeCheckerAuthentication_v6.HandshakeInformation.prototype = {};
codeCheckerAuthentication_v6.HandshakeInformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.requiresAuthentication = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.sessionStillActive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.HandshakeInformation.prototype.write = function(output) {
  output.writeStructBegin('HandshakeInformation');
  if (this.requiresAuthentication !== null && this.requiresAuthentication !== undefined) {
    output.writeFieldBegin('requiresAuthentication', Thrift.Type.BOOL, 1);
    output.writeBool(this.requiresAuthentication);
    output.writeFieldEnd();
  }
  if (this.sessionStillActive !== null && this.sessionStillActive !== undefined) {
    output.writeFieldBegin('sessionStillActive', Thrift.Type.BOOL, 2);
    output.writeBool(this.sessionStillActive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.AuthorisationList = function(args) {
  this.users = null;
  this.groups = null;
  if (args) {
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [null]);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
  }
};
codeCheckerAuthentication_v6.AuthorisationList.prototype = {};
codeCheckerAuthentication_v6.AuthorisationList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.users = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.users.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.groups = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.groups.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.AuthorisationList.prototype.write = function(output) {
  output.writeStructBegin('AuthorisationList');
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.users.length);
    for (var iter14 in this.users)
    {
      if (this.users.hasOwnProperty(iter14))
      {
        iter14 = this.users[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter15 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter15))
      {
        iter15 = this.groups[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.PermissionFilter = function(args) {
  this.given = null;
  this.canManage = null;
  if (args) {
    if (args.given !== undefined && args.given !== null) {
      this.given = args.given;
    }
    if (args.canManage !== undefined && args.canManage !== null) {
      this.canManage = args.canManage;
    }
  }
};
codeCheckerAuthentication_v6.PermissionFilter.prototype = {};
codeCheckerAuthentication_v6.PermissionFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.given = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.canManage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.PermissionFilter.prototype.write = function(output) {
  output.writeStructBegin('PermissionFilter');
  if (this.given !== null && this.given !== undefined) {
    output.writeFieldBegin('given', Thrift.Type.BOOL, 1);
    output.writeBool(this.given);
    output.writeFieldEnd();
  }
  if (this.canManage !== null && this.canManage !== undefined) {
    output.writeFieldBegin('canManage', Thrift.Type.BOOL, 2);
    output.writeBool(this.canManage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

codeCheckerAuthentication_v6.SessionTokenData = function(args) {
  this.token = null;
  this.description = null;
  this.lastAccess = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.lastAccess !== undefined && args.lastAccess !== null) {
      this.lastAccess = args.lastAccess;
    }
  }
};
codeCheckerAuthentication_v6.SessionTokenData.prototype = {};
codeCheckerAuthentication_v6.SessionTokenData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastAccess = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

codeCheckerAuthentication_v6.SessionTokenData.prototype.write = function(output) {
  output.writeStructBegin('SessionTokenData');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.lastAccess !== null && this.lastAccess !== undefined) {
    output.writeFieldBegin('lastAccess', Thrift.Type.STRING, 3);
    output.writeString(this.lastAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

