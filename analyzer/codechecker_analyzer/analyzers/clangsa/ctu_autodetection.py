# -------------------------------------------------------------------------
#                     The CodeChecker Infrastructure
#   This file is distributed under the University of Illinois Open Source
#   License. See LICENSE.TXT for details.
# -------------------------------------------------------------------------
"""
Clang Static Analyzer related functions.
"""

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import

import os
import re
import subprocess

from codechecker_common.logger import get_logger
from codechecker_analyzer import host_check

LOG = get_logger('analyzer.clangsa')


def test_binary_existence(tool_path, environ):
    """ Test the executable for existence by checking its version. """
    try:
        version = subprocess.check_output([tool_path, '-version'],
                                          env=environ)
    except (subprocess.CalledProcessError, OSError):
        version = 'ERROR'
    return version != 'ERROR'


class ClangVersionInfo(object):
    """
    ClangVersionInfo holds the relevant version information of the used Clang
    tool.
    """

    def __init__(self,
                 major_version=None,
                 minor_version=None,
                 patch_version=None,
                 target=None,
                 thread_model=None,
                 installed_dir=None):

        self.major_version = int(major_version)
        self.minor_version = int(minor_version)
        self.patch_version = int(patch_version)
        self.target = str(target)
        self.thread_model = str(thread_model)
        self.installed_dir = str(installed_dir)


class ClangVersionInfoParser(object):
    """
    ClangVersionInfoParser is responsible for creating ClangVersionInfo
    instances from the version output of Clang.
    """

    def __init__(self):
        self.bin_dist_detection_pattern = (
            r'clang version (?P<major_version>[0-9]+)'
            r'\.(?P<minor_version>[0-9]+)\.(?P<patch_version>[0-9]+)\s+'
            r'\((?P<version_specifier>[^\s]*)\)\s+'
            r'Target: (?P<target>[^\s]*)\s+'
            r'Thread model: (?P<thread_model>[^\s]*)\s+'
            r'InstalledDir: (?P<installed_dir>[^\s]*).*')

        self.source_build_detection_pattern = (
            r'clang version (?P<major_version>[0-9]+)'
            r'\.(?P<minor_version>[0-9]+)\.(?P<patch_version>[0-9]+)\s+'
            r'\((?P<clang_repository>[^\s]*)\s+(?P<clang_commit>[^\s]*)\)\s+'
            r'\((?P<llvm_repository>[^\s]*)\s+(?P<llvm_commit>[^\s]*)\)\s+'
            r'Target: (?P<target>[^\s]*)\s+'
            r'Thread model: (?P<thread_model>[^\s]*)\s+'
            r'InstalledDir: (?P<installed_dir>[^\s]*).*')

        self.source_monorepo_build_detection_pattern = (
            r'clang version (?P<major_version>[0-9]+)'
            r'\.(?P<minor_version>[0-9]+)\.(?P<patch_version>[0-9]+)\s+'
            r'\((?P<llvm_repository>[^\s]*)\s+(?P<llvm_commit>[^\s]*)\)\s+'
            r'Target: (?P<target>[^\s]*)\s+'
            r'Thread model: (?P<thread_model>[^\s]*)\s+'
            r'InstalledDir: (?P<installed_dir>[^\s]*).*')

    def parse(self, version_string):
        """
        Try to parse the version string using multiple strategies. First the
        binary version regex, then the multi-repository source and
        finally the monorepo source build is attempted.
        """

        parse_strategies = [
                self.try_as_bin_dist_output,
                self.try_as_source_output,
                self.try_as_monorepo_source_output]

        version_info = next((strategy(version_string)
                            for strategy in parse_strategies
                            if strategy(version_string)),
                            False)

        return version_info

    def try_as_bin_dist_output(self, version_string):
        """
        Try to parse the output generated by binary distributions of clang.
        Example:

        clang version 7.0.0 (tags/RELEASE_700/final)
        Target: x86_64-unknown-linux-gnu
        Thread model: posix
        InstalledDir: /path/to/clang/bin
        """

        version_pattern = re.compile(self.bin_dist_detection_pattern)

        match = version_pattern.search(version_string)

        if not match:
            return False

        return ClangVersionInfo(
                match.group('major_version'),
                match.group('minor_version'),
                match.group('patch_version'),
                match.group('target'),
                match.group('thread_model'),
                match.group('installed_dir'))

    def try_as_source_output(self, version_string):
        """
        Try to parse the output generated by source-built clang.
        Example:

        clang version 7.1.0 (https://github.com/llvm-mirror/clang
        4519e2637fcc4bf6e3049a0a80e6a5e7b97667cb)
        (https://github.com/llvm-mirror/llvm
        dd3329aeb25d87d4ac6429c0af220f92e1ba5f26)

        Target: x86_64-unknown-linux-gnu
        Thread model: posix
        InstalledDir: /path/to/clang/bin
        """

        version_pattern = re.compile(self.source_build_detection_pattern)

        match = version_pattern.search(version_string)

        if not match:
            return False

        return ClangVersionInfo(
                match.group('major_version'),
                match.group('minor_version'),
                match.group('patch_version'),
                match.group('target'),
                match.group('thread_model'),
                match.group('installed_dir'))

    def try_as_monorepo_source_output(self, version_string):
        """
        Try to parse the output generated by monorepo source-built clang.
        Note that monorepo version string has only 1 repository url.
        Example:

        clang version 9.0.0 (https://github.com/llvm/llvm-project
        574018a52fddf30307f46a7ebe2722663f2cf459)
        Target: x86_64-unknown-linux-gnu
        Thread model: posix
        InstalledDir: /path/to/clang/bin
        """

        version_pattern = re.compile(
            self.source_monorepo_build_detection_pattern)

        match = version_pattern.search(version_string)

        if not match:
            return False

        return ClangVersionInfo(
                match.group('major_version'),
                match.group('minor_version'),
                match.group('patch_version'),
                match.group('target'),
                match.group('thread_model'),
                match.group('installed_dir'))


class CTUAutodetection(object):
    """
    CTUAutodetection is responsible for providing the availability information
    of CTU feature, the the relevant mapping tool path and the mapping file
    name.
    """

    def __init__(self, analyzer_binary, environ):
        self.__analyzer_binary = analyzer_binary
        self.__analyzer_version_info = None
        self.environ = environ
        self.parser = ClangVersionInfoParser()

    @property
    def analyzer_version_info(self):
        """
        Returns the relevant parameters of the analyzer by parsing the
        output of the analyzer binary when called with version flag.
        """

        if self.__analyzer_binary is None:
            return False

        if self.__analyzer_version_info is not None:
            return self.__analyzer_version_info

        try:
            analyzer_output = subprocess.check_output(
                [self.__analyzer_binary, '--version'], env=self.environ)
        except (subprocess.CalledProcessError, OSError):
            return False

        version_info = self.parser.parse(analyzer_output)

        if not version_info:
            return False

        self.__analyzer_version_info = version_info
        return self.__analyzer_version_info

    @property
    def major_version(self):
        """
        Returns the major version of the analyzer, which is used for
        CTU analysis.
        """

        if not self.analyzer_version_info:
            return False

        return self.analyzer_version_info.major_version

    @property
    def installed_dir(self):
        """
        Returns the installed directory of the analyzer, which is used for
        CTU analysis.
        """

        if not self.analyzer_version_info:
            return False

        return self.analyzer_version_info.installed_dir

    @property
    def mapping_tool_path(self):
        """
        Returns the path of the mapping tool, which is assumed to be located
        inside the installed directory of the analyzer. Certain binary
        distributions can postfix the the tool name with the major version
        number, the the number and the tool name being separated by a dash. By
        default the shorter name is looked up, then if it is not found the
        postfixed.
        """

        if not self.analyzer_version_info:
            return False

        major_version = self.analyzer_version_info.major_version
        installed_dir = self.analyzer_version_info.installed_dir

        tool_name = 'clang-extdef-mapping' if major_version > 7 else\
                    'clang-func-mapping'

        tool_path = os.path.join(installed_dir, tool_name)

        if os.path.isfile(tool_path):
            return tool_path

        postfixed_tool_path = ''.join([tool_path, '-', str(major_version)])

        if os.path.isfile(postfixed_tool_path):
            return postfixed_tool_path

        return False

    @property
    def display_progress(self):
        """Return analyzer args if it is capable to display ctu progress.

        Returns None if the analyzer can not display ctu progress.
        The ctu display progress arguments depend on
        the clang analyzer version.
        """

        if not self.analyzer_version_info:
            return None
        ctu_display_progress_args = ['-Xclang',
                                     '-analyzer-config',
                                     '-Xclang',
                                     'display-ctu-progress=true']

        ok = host_check.has_analyzer_config_option(
            self.__analyzer_binary, "display-ctu-progress", self.environ)
        if not ok:
            return None
        return ctu_display_progress_args

    @property
    def mapping_file_name(self):
        """ Returns the installed directory of the analyzer, which is used for
        CTU analysis. """

        if not self.analyzer_version_info:
            return False

        major_version = self.analyzer_version_info.major_version

        return 'externalDefMap.txt' if major_version > 7 else\
               'externalFnMap.txt'

    @property
    def is_ctu_capable(self):
        """ Detects if the current clang is CTU compatible. Tries to autodetect
        the correct one based on clang version. """

        tool_path = self.mapping_tool_path

        if not tool_path:
            return False

        return test_binary_existence(tool_path, self.environ)
