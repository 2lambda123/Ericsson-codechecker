#!/usr/bin/env python3
# -------------------------------------------------------------------------
#
#  Part of the CodeChecker project, under the Apache License v2.0 with
#  LLVM Exceptions. See LICENSE for license information.
#  SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# -------------------------------------------------------------------------
"""
Used to kickstart CodeChecker.
Save original environment without modifications.
Used to run the logging in the same env.
"""

import os
import pickle
import signal
import subprocess
import sys
import tempfile


def main(subcommand):
    """
    Save the original environment before any modification.
    """
    original_env = os.environ.copy()
    checker_env = original_env

    tmp_dir = tempfile.mkdtemp()

    original_env_file = os.path.join(tmp_dir, 'original_env.pickle')

    try:
        with open(original_env_file, 'wb') as env_save:
            pickle.dump(original_env, env_save)

        checker_env['CODECHECKER_ORIGINAL_BUILD_ENV'] = original_env_file
    except Exception as ex:
        print('Saving original build environment failed.')
        print(ex)
        sys.exit(0)

    package_bin = os.path.dirname(os.path.realpath(__file__))
    package_root, bin_dir = os.path.split(package_bin)

    common_lib = os.path.join(package_root,
                              'lib',
                              'python3')

    checker_env['PYTHONPATH'] = common_lib

    checker_env['CC_PACKAGE_ROOT'] = \
        os.path.realpath(os.path.join(package_bin, os.pardir))

    codechecker_main = os.path.join(package_root,
                                    'cc_bin',
                                    'CodeChecker.py')

    checker_cmd = [sys.executable, codechecker_main]

    if subcommand:
        # If a subcommand is specified (script is executed from a
        # wrapper entry point, add it to the command list).
        # E.g. 'codechecker-log ...' is the same as 'CodeChecker log ...'.
        checker_cmd.append(subcommand)

    checker_cmd.extend(sys.argv[1:])
    os.execve(sys.executable, checker_cmd, checker_env)


if __name__ == "__main__":
    main(None)
