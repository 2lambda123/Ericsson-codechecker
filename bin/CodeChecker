#!/usr/bin/env python
# -------------------------------------------------------------------------
#                     The CodeChecker Infrastructure
#   This file is distributed under the University of Illinois Open Source
#   License. See LICENSE.TXT for details.
# -------------------------------------------------------------------------
"""
Used to kickstart CodeChecker.
Save original environment without modifications.
Used to run the logging in the same env.
"""
from __future__ import print_function

import errno
import os
import pickle
import shutil
import signal
import subprocess
import sys
import tempfile

proc_pid = None


def run_codechecker(checker_env, subcommand=None):
    """
    Run the CodeChecker.
        * checker_env - CodeChecker will be run in the checker env.
        * subcommand - CodeChecker will run the given subcommand by default,
                       if specified. If not, the main script will run and parse
                       all the commands.
    """
    package_bin = os.path.dirname(os.path.realpath(__file__))
    package_root, bin_dir = os.path.split(package_bin)

    python = os.path.join('python')
    common_lib = os.path.join(package_root,
                              'lib',
                              'python2.7')

    gen_lib = os.path.join(package_root,
                           'lib',
                           'python2.7',
                           'gencodechecker')

    checker_env['PYTHONPATH'] = common_lib + ':' + gen_lib

    checker_env['CC_PACKAGE_ROOT'] = \
        os.path.realpath(os.path.join(package_bin, os.pardir))

    codechecker_main = os.path.join(package_root,
                                    'cc_bin',
                                    'CodeChecker.py')

    checker_cmd = [python, codechecker_main]

    if subcommand:
        # If a subcommand is specified (script is executed from a
        # wrapper entry point, add it to the command list).
        # E.g. 'codechecker-log ...' is the same as 'CodeChecker log ...'.
        checker_cmd.append(subcommand)

    checker_cmd.extend(sys.argv[1:])

    proc = subprocess.Popen(checker_cmd, env=checker_env)
    global proc_pid
    proc_pid = proc.pid

    proc.wait()
    sys.exit(proc.returncode)


def main(subcommand=None):
    original_env = os.environ.copy()
    checker_env = original_env

    tmp_dir = tempfile.mkdtemp()

    original_env_file = os.path.join(tmp_dir, 'original_env.pickle')

    def _remove_tmp():
        # Remove temporary directory.
        try:
            shutil.rmtree(tmp_dir)
        except Exception as ex:
            if type(ex) != OSError or ex.errno != errno.ENOENT:
                print('Failed to remove temporary directory: ' + tmp_dir)
                print('Manual cleanup is required.')
                print(ex)

    try:
        with open(original_env_file, 'wb') as env_save:
            pickle.dump(original_env, env_save)

        checker_env['CODECHECKER_ORIGINAL_BUILD_ENV'] = original_env_file
    except Exception as ex:
        print('Saving original build environment failed.')
        print(ex)

    def signal_term_handler(sig, frame):
        global proc_pid
        if proc_pid:
            os.kill(proc_pid, signal.SIGINT)

        _remove_tmp()
        sys.exit(0)

    signal.signal(signal.SIGTERM, signal_term_handler)
    signal.signal(signal.SIGINT, signal_term_handler)

    def signal_reload_handler(sig, frame):
        global proc_pid
        if proc_pid:
            os.kill(proc_pid, signal.SIGHUP)

    signal.signal(signal.SIGHUP, signal_reload_handler)

    try:
        run_codechecker(checker_env, subcommand)
    finally:
        _remove_tmp()


if __name__ == "__main__":
    main(None)
