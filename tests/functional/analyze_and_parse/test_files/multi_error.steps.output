NORMAL#CodeChecker log --output $LOGFILE$ --build "make multi_error" --quiet
NORMAL#CodeChecker analyze $LOGFILE$ --output $OUTPUT$ --analyzers clangsa
NORMAL#CodeChecker parse $OUTPUT$ --print-steps
CHECK#CodeChecker check --build "make multi_error" --output $OUTPUT$ --quiet --analyzers clangsa --print-steps
-------------------------------------------------------
[] - Starting build ...
[] - Build finished successfully.
[] - Starting static analysis ...
[] - [1/1] clangsa analyzed multi_error.cpp successfully.
[] - ----==== Summary ====----
[] - Total analyzed compilation commands: 1
[] - Successfully analyzed
[] -   clangsa: 1
[] - ----=================----
[] - Analysis finished.
[] - To view results in the terminal use the "CodeChecker parse" command.
[] - To store results use the "CodeChecker store" command.
[] - See --help and the user guide for further options about parsing and storing the reports.
[] - ----=================----
[HIGH] multi_error.cpp:3:3: Address of stack memory associated with local variable 'x' returned to caller [core.StackAddressEscape]
  return &x;
  ^
  Report hash: 9b976691ee1dbc182ca89ecfcae5c8db
  Steps:
    1, multi_error.cpp:10:12: Calling 'foo'
    2, multi_error.cpp:1:1: Entered call from 'main'
    3, multi_error.cpp:3:3: Address of stack memory associated with local variable 'x' returned to caller

[LOW] multi_error.cpp:9:3: Value stored to 'y' is never read [deadcode.DeadStores]
  y = 7;
  ^
  Report hash: e4907182b363faf2ec905fc32cc5a4ab
  Steps:
    1, multi_error.cpp:9:3: Value stored to 'y' is never read

Found 2 defect(s) while analyzing multi_error.cpp


----==== Summary ====----
------------------------------
Filename        | Report count
------------------------------
multi_error.cpp |            2
------------------------------
-----------------------
Severity | Report count
-----------------------
HIGH     |            1
LOW      |            1
-----------------------
----=================----
Total number of reports: 2
----=================----
